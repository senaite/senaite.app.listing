{"version":3,"sources":["webpack:///external \"jQuery\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./components/Button.coffee","webpack:///./components/ButtonBar.coffee","webpack:///./components/FilterBar.coffee","webpack:///./api.coffee","webpack:///./components/Loader.coffee","webpack:///./components/Messages.coffee","webpack:///./components/Pagination.coffee","webpack:///./components/SearchBox.coffee","webpack:///./components/Checkbox.coffee","webpack:///./components/TableHeaderCell.coffee","webpack:///./components/TableHeaderRow.coffee","webpack:///./components/HiddenField.coffee","webpack:///./components/MultiChoice.coffee","webpack:///./components/MultiSelect.coffee","webpack:///./components/NumericField.coffee","webpack:///./components/CalculatedField.coffee","webpack:///./components/ReadonlyField.coffee","webpack:///./components/Select.coffee","webpack:///./components/StringField.coffee","webpack:///./components/TableCell.coffee","webpack:///./components/RemarksField.coffee","webpack:///./components/TableTransposedCell.coffee","webpack:///./components/TableCells.coffee","webpack:///./components/TableRow.coffee","webpack:///./components/TableCategoryRow.coffee","webpack:///./components/TableRemarksRow.coffee","webpack:///./components/TableRows.coffee","webpack:///./components/Table.coffee","webpack:///./components/TableColumnConfig.coffee","webpack:///./listing.coffee"],"names":["module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","React","ReactDOM","id","props","title","name","url","onClick","className","dangerouslySetInnerHTML","__html","style","marginLeft","on_ajax_save_button_click","on_transition_button_click","$","confirmation","rootSelector","btnOkLabel","_t","btnOkClass","btnOkIconClass","btnCancelLabel","btnCancelClass","btnCancelIconClass","container","singleton","additional_cls","css_mapping","event","action","el","buttons","transitions","transition","help","cls","btn_id","review_state_confirm_transitions","review_state","attrs","confirm_transitions","badge","selected_uids","on_filter_button_clicked","currentTarget","active_state","value","api_url","location","results","RegExp","decodeURIComponent","options","method","data","JSON","on_api_error","init","headers","body","credentials","request","Request","fetch","response","Promise","document","dataset","token","on_dismiss_message","index","parseInt","messages","me","this","message","type","aria-label","aria-hidden","pagesize","on_show_more_click","on_pagesize_change","on_export_click","pagesize_input","current","ref","disabled","size","defaultValue","state","onChange","onKeyPress","on_search_field_keypress","on_search_button_click","on_clear_button_click","search_input_field","autofocus","placeholder","on_change","uid","checked","before","column_key","defaultChecked","tabIndex","after","sort_order","on_header_column_click","classList","folderitems","required","column","sortable_columns","item","cells","all_selected","show_select_all_checkbox","columns","sortable","sort_on","is_sort_column","onContextMenu","ul","parentNode","i","input","sorted_options","text_a","ResultText","text_b","b","ResultValue","option","selected","props_options","exclude_values","Array","values","excluded_values","selectors","excluded","selected_value","on_blur","prevProps","onBlur","formatted_value","before_components","after_components","allow_edit","required_fields","interims","interim","unit","mapping","replace","editable","resultfield","css_class","update_editable_field","save_editable_field","fieldname","ZPUBLISHER_CONVERTER","choices","duplicates","field","colSpan","rowSpan","_","display","expanded_remarks","width","rows","css","fields","keyword","result_column_title","href","column_index","on_remarks_expand_click","skip","show_select_column","checkbox_name","remarks","colspan","rowspan","tabindex","category","on_category_click","icon_cls","padding","borderTop","on_row_expand_click","first_td","row","children","expanded","expanded_categories","state_class","expandable","remarks_columns","transposed","row_index","child_rows","on_drag_start","on_drag_end","on_drag_over","on_column_toggle_click","on_reset_click","columns_order","dataTransfer","li","column1","dragged_item","column2","visible","onDragOver","onDragStart","onDragEnd","draggable","window","text","tables","listings","form_id","controller","root_el","ListingController","dismissMessage","doAction","filterBySearchterm","filterByState","on_column_config_click","on_select_checkbox_checked","on_reload","saveAjaxQueue","saveEditableField","setColumnsOrder","showMore","sortBy","toggleCategory","toggleColumn","toggleRemarks","toggleRow","updateEditableField","listing_identifier","loading","show_column_config","filter","api","query_string","review_states","categories","expanded_rows","total","catalog_indexes","catalog_columns","ajax_save_queue","content_filter","show_column_toggles","select_checkbox_name","post_action","show_categories","expand_all_categories","show_more","limit_from","show_search","show_ajax_save","show_table_footer","fetch_transitions_on_select","show_export","concat","level","traceback","parent_uid","item_children","child","toggle","column_config","ordered_columns","keys","order","allowed_keys","visibility","columns_keys","local_config","new_folderitems","columns_visibility","col","header","csv","csv_file","Blob","encoding","down_link","filename","URL","cell","choice","c","form","all_uids","by_uid","readonly","pos","added","removed","prefix","postfix","localStorage","count","length","promise","existing_folderitems","new_categories","folderitem","child_uids","save_queue","updated_folderitems","old_item","new_item","columns_count","visible_columns","item_count","render_toolbar_top","on_search","description","on_columns_order_change","on_context_menu","ajax_save_button_title","show_more_button_title","onShowMore","export_button_title","onExport"],"mappings":"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","file":"senaite.app.listing-6b48878.js","sourcesContent":["module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => module['default'] :\n\t\t() => module;\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","const __WEBPACK_NAMESPACE_OBJECT__ = React;","const __WEBPACK_NAMESPACE_OBJECT__ = ReactDOM;","import React from \"react\"\n\n\nclass Button extends React.Component\n  ###\n   * The button component renders a single button\n  ###\n\n  render: ->\n    ###\n     * Render the Button component\n    ###\n    <button id={@props.id}\n            title={@props.help or @props.title}\n            name={@props.name}\n            url={@props.url}\n            onClick={@props.onClick}\n            className={@props.className}\n            {...@props.attrs}>\n      <span dangerouslySetInnerHTML={{__html: @props.title}}></span>\n      {@props.badge and\n        <span className=\"badge badge-light\"\n              style={{marginLeft: \"0.25em\"}}>\n          {@props.badge}\n        </span>\n      }\n    </button>\n\n\nexport default Button\n","import React from \"react\"\n\nimport Button from \"./Button.coffee\"\n\n\nclass ButtonBar extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n    # Bind eventhandlers to local context\n    @on_ajax_save_button_click = @on_ajax_save_button_click.bind @\n    @on_transition_button_click = @on_transition_button_click.bind @\n\n    # default \"confirm first\" transitions\n    @confirm_transitions = [\n      \"cancel\"\n      \"deactivate\"\n      \"invalidate\"\n      \"reject\"\n      \"remove\"\n      \"retract\"\n      \"unassign\"\n      \"retest\"\n    ]\n\n    @css_mapping =\n      # default buttons\n      \"reassign\": \"btn-secondary\"\n      \"duplicate\": \"btn-secondary\"\n      \"close\": \"btn-secondary\"\n      # blue buttons\n      \"assign\": \"btn-secondary\"\n      \"receive\": \"btn-primary\"\n      \"open\": \"btn-primary\"\n      \"verify\": \"btn-primary\"\n      \"retest\": \"btn-primary\"\n      # green buttons\n      \"activate\": \"btn-success\"\n      \"prepublish\": \"btn-success\"\n      \"publish\": \"btn-success\"\n      \"republish\": \"btn-success\"\n      \"submit\": \"btn-success\"\n      # orange buttons\n      \"unassign\": \"btn-warning\"\n      # red buttons\n      \"cancel\": \"btn-danger\"\n      \"deactivate\": \"btn-danger\"\n      \"invalidate\": \"btn-danger\"\n      \"reject\": \"btn-danger\"\n      \"retract\": \"btn-danger\"\n      \"remove\": \"btn-danger\"\n\n  componentDidUpdate: ->\n    # N.B. This needs jQuery.js and bootstrap.js injected from the outer scope\n    #      -> see webpack.config.js externals\n    #\n    # Not sure if hooking this event handler in `componentDidUpdate` always\n    # intercepts correctly *before* the bound `onClick` event handler fires.\n    #\n    # http://bootstrap-confirmation.js.org/\n    $(\"[data-toggle=confirmation]\").confirmation\n      rootSelector: \"[data-toggle=confirmation]\"\n      btnOkLabel: _t(\"Yes\")\n      btnOkClass: \"btn btn-outline-primary\"\n      btnOkIconClass: \"fas fa-check-circle mr-1\"\n      btnCancelLabel: _t(\"No\")\n      btnCancelClass: \"btn btn-outline-secondary\"\n      btnCancelIconClass: \"fas fa-circle mr-1\"\n      container: \"body\"\n      singleton: yes\n\n  get_button_css: (id) ->\n    # calculate the button CSS\n    cls = \"btn btn-sm mr-1 mb-1\"\n\n    # append additional button styles\n    additional_cls = @css_mapping[id]\n    if additional_cls\n      cls += \" #{additional_cls}\"\n    else\n      cls += \" btn-outline-secondary\"\n\n    return cls\n\n  on_ajax_save_button_click: (event) ->\n    # prevent form submit, because we want to handle that explicitly\n    event.preventDefault()\n\n    # call the parent event handler to save\n    if @props.on_ajax_save_button_click\n      @props.on_ajax_save_button_click()\n\n  on_transition_button_click: (event) ->\n    # prevent form submit, because we want to handle that explicitly\n    event.preventDefault()\n\n    # extract the action ID\n    el = event.currentTarget\n\n    # extract the transition action and the url of the button\n    action = el.getAttribute \"id\"\n    url = el.getAttribute \"url\"\n\n    # call the parent event handler to perform the transition\n    if @props.on_transition_button_click\n      @props.on_transition_button_click action, url\n\n  build_buttons: ->\n    buttons = []\n\n    # Add a clear button if the select column is rendered\n    if @props.show_select_column\n      if @props.transitions.length > 0\n        buttons.push(\n          <button\n            key=\"clear\"\n            className=\"btn btn-outline-secondary btn-sm mb-1 mr-1\"\n            title={_t(\"Clear selection\")}\n            onClick={@on_transition_button_click}\n            id=\"clear_selection\">\n            <i className=\"fas fa-circle-notch\"></i>\n          </button>\n          )\n\n    # Add an Ajax save button\n    if @props.show_ajax_save\n      buttons.push(\n        <button\n          key=\"ajax-save\"\n          className=\"btn btn-primary btn-sm mb-1 mr-1\"\n          onClick={@on_ajax_save_button_click}\n          title={@props.ajax_save_button_title}\n          id=\"ajax_save_selection\">\n          {@props.ajax_save_button_title} <i className=\"fas fa-save\"></i>\n        </button>\n        )\n\n    # build the transition buttons\n    for transition in @props.transitions\n      id = transition.id\n      url = transition.url\n      title = _t(transition.title)\n      help = _t(transition.help)\n      cls = @get_button_css id\n      btn_id = \"#{id}_transition\"\n\n      # append custom css class\n      if transition.css_class\n        cls += \" #{transition.css_class}\"\n\n      # each review_state item may also define a list of confirm transitions\n      review_state_confirm_transitions = @props.review_state.confirm_transitions or []\n\n      # Add bootstrap-confirmation data toggle\n      # http://bootstrap-confirmation.js.org/#options\n      attrs = {}\n      if id in @confirm_transitions or id in review_state_confirm_transitions\n        attrs[\"data-toggle\"] = \"confirmation\"\n        attrs[\"data-title\"] = \"#{title}?\"\n\n      buttons.push(\n        <Button\n          key={transition.id}\n          id={btn_id}\n          title={title}\n          help={help}\n          url={url}\n          className={cls}\n          badge={@props.selected_uids.length}\n          onClick={@on_transition_button_click}\n          attrs={attrs}/>\n      )\n\n    return buttons\n\n  render: ->\n    if @props.selected_uids.length == 0\n      return null\n\n    <div className=\"#{@props.className}\">\n      {@build_buttons()}\n    </div>\n\n\nexport default ButtonBar\n","import React from \"react\"\nimport Button from \"./Button.coffee\"\n\n\nclass FilterBar extends React.Component\n  ###\n   * The filter component provides workflow filter buttons\n  ###\n\n  constructor: (props) ->\n    super(props)\n\n    @on_filter_button_clicked = @on_filter_button_clicked.bind @\n\n  on_filter_button_clicked: (event) ->\n    ###\n     * Event handler when a filter button was clicked\n    ###\n\n    # prevent form submission\n    event.preventDefault()\n\n    el = event.currentTarget\n    id = el.id\n\n    # call the parent event handler with the state id\n    @props.on_filter_button_clicked id\n\n  build_filter_buttons: ->\n    ###\n     * Build filter buttons from the listing `review_states` list\n    ###\n    buttons = []\n\n    # the current active review state\n    active_state = @props.review_state\n\n    for key, value of @props.review_states\n\n      # button CSS\n      cls = \"nav-item btn btn-sm btn-outline-secondary mr-1 mb-1\"\n\n      if value.id == active_state\n        cls += \" active\"\n\n      buttons.push(\n        <Button\n          key={value.id}\n          onClick={@on_filter_button_clicked}\n          id={value.id}\n          title={value.title}\n          className={cls}/>\n      )\n\n    # omit filter buttons if there is only one\n    if buttons.length == 1\n      return []\n\n    return buttons\n\n  render: ->\n    <div className={@props.className}>\n      {@build_filter_buttons()}\n    </div>\n\n\nexport default FilterBar\n","###\n * Listing API Module\n###\n\nclass ListingAPI\n\n  constructor: (props) ->\n    console.debug \"ListingAPI::constructor\"\n    @api_url = props.api_url\n    @on_api_error = props.on_api_error or (response) ->\n    return @\n\n  get_api_url: (endpoint) ->\n    ###\n     * Build API URL for the given endpoint\n     * @param {string} endpoint\n     * @returns {string}\n    ###\n    return \"#{@api_url}/#{endpoint}#{location.search}\"\n\n  get_url_parameter: (name) ->\n    ###\n     * Parse a request parameter by name\n    ###\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]')\n    regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)')\n    results = regex.exec(location.search)\n    if results == null\n      return \"\"\n    return decodeURIComponent(results[1].replace(/\\+/g, ' '))\n\n  get_json: (endpoint, options) ->\n    ###\n     * Fetch Ajax API resource from the server\n     * @param {string} endpoint\n     * @param {object} options\n     * @returns {Promise}\n    ###\n    options ?= {}\n\n    method = options.method or \"POST\"\n    data = JSON.stringify(options.data) or \"{}\"\n    on_api_error = @on_api_error\n\n    url = @get_api_url endpoint\n    init =\n      method: method\n      headers:\n        \"Content-Type\": \"application/json\"\n        \"X-CSRF-TOKEN\": @get_csrf_token()\n      body: if method is \"POST\" then data else null\n      credentials: \"include\"\n    console.info \"ListingAPI::fetch:endpoint=#{endpoint} init=\",init\n    request = new Request(url, init)\n    fetch(request)\n    .then (response) ->\n      if not response.ok\n        return Promise.reject response\n      return response\n    .then (response) ->\n      return response.json()\n    .catch (response) ->\n      on_api_error response\n      return response\n\n  set_fields: (data) ->\n    ###\n     * Set values of multiple fields\n     * @returns {Promise}\n    ###\n    options =\n      data: data or {}\n      method: \"POST\"\n    return @get_json \"set_fields\", options\n\n  query_folderitems: (data) ->\n    ###\n     * Query folderitems\n     * @returns {Promise}\n    ###\n    options =\n      data: data or {}\n      method: \"POST\"\n    return @get_json \"query_folderitems\", options\n\n  fetch_children: (data) ->\n    ###\n     * Query children\n     * @returns {Promise}\n    ###\n    options =\n      data: data or {}\n      method: \"POST\"\n    return @get_json \"get_children\", options\n\n  fetch_folderitems: (data) ->\n    ###\n     * Fetch folder items\n     * @returns {Promise}\n    ###\n    options =\n      data: data or {}\n      method: \"POST\"\n    return @get_json \"folderitems\", options\n\n  fetch_transitions: (data) ->\n    ###\n     * Fetch possible transitions\n     * @returns {Promise}\n    ###\n    options =\n      data: data or {}\n      method: \"POST\"\n    return @get_json \"transitions\", options\n\n  get_csrf_token: () ->\n    ###\n     * Get the plone.protect CSRF token\n     * Note: The fields won't save w/o that token set\n    ###\n    return document.querySelector(\"#protect-script\").dataset.token\n\n\nexport default ListingAPI\n","import React from \"react\"\n\nimport \"./Loader.css\"\n\n\nclass Loader extends React.Component\n\n  render: ->\n    if not @props.loading\n      # render a placeholder to avoid vertical jumps\n      return <div className=\"loader\"></div>\n\n    <div className=\"loader\">\n      <span className=\"dot dot_1\"></span>\n      <span className=\"dot dot_2\"></span>\n      <span className=\"dot dot_3\"></span>\n      <span className=\"dot dot_4\"></span>\n    </div>\n\n\nexport default Loader\n","import React from \"react\"\n\n\nclass Messages extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n    # Bind eventhandlers to local context\n    @on_dismiss_message = @on_dismiss_message.bind @\n\n  on_dismiss_message: (event) ->\n    event.preventDefault()\n    index = event.currentTarget.getAttribute \"index\"\n    # call the parent event handler\n    if @props.on_dismiss_message\n      @props.on_dismiss_message parseInt(index)\n\n  render_messages: ->\n    messages = []\n    me = this\n    @props.messages.map (message, index) ->\n      messages.push(\n        <div key={index} className=\"alert alert-#{message.level or 'info'}\">\n          <button onClick={me.on_dismiss_message} index={index} type=\"button\" className=\"close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          {message.title and <h4 className=\"alert-heading\">{message.title}</h4>}\n          {message.text and <div>{message.text}</div>}\n          {message.traceback and <pre>{message.traceback}</pre>}\n        </div>)\n    return messages\n\n  render: ->\n    if not @props.messages\n      return null\n    <div id={@props.id} className={@props.className}>\n      {@render_messages()}\n    </div>\n\nexport default Messages\n","import React from \"react\"\n\n\nclass Pagination extends React.Component\n  ###\n   * The pagination component renders table paging controls\n  ###\n\n  constructor: (props) ->\n    super(props)\n\n    @state =\n      pagesize: @props.pagesize\n\n    # bind event handler to local context\n    @on_show_more_click = @on_show_more_click.bind @\n    @on_pagesize_change = @on_pagesize_change.bind @\n    @on_export_click = @on_export_click.bind @\n\n    # create element references\n    @pagesize_input = React.createRef()\n    @show_more_button = React.createRef()\n    @export_button = React.createRef()\n\n  on_show_more_click: (event) ->\n    ###\n     * Event handler when the \"Show more\" button was clicked\n    ###\n\n    # prevent form submission\n    event.preventDefault()\n\n    # parse the value of the pagesize input field\n    pagesize = parseInt @pagesize_input.current.value\n\n    # minimum pagesize is 1\n    if not pagesize or pagesize < 1\n      pagesize = 1\n\n    # call the parent event handler\n    @props.onShowMore pagesize\n\n  on_pagesize_change: (event) ->\n    ###\n     * Event handler when a manual pagesize was entered\n    ###\n\n    pagesize = @get_pagesize_input_value()\n\n    # set the pagesize to the local state\n    @setState pagesize: pagesize\n\n    # handle enter keypress\n    if event.which == 13\n      # prevent form submission\n      event.preventDefault()\n\n      # call the parent event listener\n      @props.onShowMore pagesize\n\n  get_pagesize_input_value: ->\n    ###\n     * Fetch the value of the pagesize input field\n    ###\n\n    pagesize = parseInt @pagesize_input.current.value\n\n    if not pagesize or pagesize < 1\n      # minimum pagesize is 1\n      pagesize = 1\n      # write sanitized value back to the field\n      @pagesize_input.current.value = pagesize\n\n    return pagesize\n\n  on_export_click: (event) ->\n    ###\n     * Event handler when the \"Export\" button was clicked\n    ###\n\n    # prevent form submission\n    event.preventDefault()\n    console.debug \"Pagination::on_export_click\"\n\n    # call the parent event handler\n    @props.onExport()\n\n  render: ->\n    if @props.count >= @props.total\n      <div id={@props.id} className={@props.className}>\n        {not @props.show_export and\n        <div className=\"text-right\">\n          {@props.count} / {@props.total}\n        </div>\n        }\n        {@props.show_export and\n        <div className=\"input-group input-group-sm float-right\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{@props.count} / {@props.total}</span>\n          </div>\n          <span className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\"\n                    ref={@export_button}\n                    disabled={@props.count == 0}\n                    onClick={@on_export_click}>\n              <span>{@props.export_button_title or \"Export\"}</span>\n            </button>\n          </span>\n        </div>\n        }\n      </div>\n    else\n      <div id={@props.id} className={@props.className}>\n        <div className=\"input-group input-group-sm float-right\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{@props.count} / {@props.total}</span>\n          </div>\n          <input type=\"text\"\n                 size=\"3\"\n                 defaultValue={@state.pagesize}\n                 onChange={@on_pagesize_change}\n                 onKeyPress={@on_pagesize_change}\n                 ref={@pagesize_input}\n                 disabled={@props.count >= @props.total}\n                 className=\"form-control\"/>\n          <span className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\"\n                    disabled={@props.count >= @props.total}\n                    ref={@show_more_button}\n                    onClick={@on_show_more_click}>\n              <span>{@props.show_more_button_title or \"Show more\"}</span>\n            </button>\n            {@props.show_export and\n            <button className=\"btn btn-outline-secondary\"\n                    ref={@export_button}\n                    disabled={@props.count == 0}\n                    onClick={@on_export_click}>\n              <span>{@props.export_button_title or \"Export\"}</span>\n            </button>\n            }\n          </span>\n        </div>\n      </div>\n\n\nexport default Pagination\n","import React from \"react\"\n\n\nclass SearchBox extends React.Component\n  ###\n   * This component provides a search box\n  ###\n\n  constructor: (props) ->\n    super(props)\n\n    @on_search_field_keypress = @on_search_field_keypress.bind @\n    @on_search_button_click = @on_search_button_click.bind @\n    @on_clear_button_click = @on_clear_button_click.bind @\n\n    @search_input_field = React.createRef()\n\n  on_search_field_keypress: (event) ->\n    ###\n     * Event handler when a keypress was detected in the searchfield\n    ###\n\n    # handle enter key\n    if event.which == 13\n      # prevent form submission on enter\n      event.preventDefault()\n\n      # call the parent event handler with the current search value\n      value = @get_search_value()\n      @props.on_search value\n\n  on_search_button_click: (event) ->\n    ###\n     * Event handler when the search button was clicked\n    ###\n\n    # prevent form submission\n    event.preventDefault()\n\n    # call the parent event handler with the current search value\n    value = @get_search_value()\n    @props.on_search value\n\n  on_clear_button_click: (event) ->\n    ###\n     * Event handler when the clear button was clicked\n    ###\n\n    # prevent form submission\n    event.preventDefault()\n\n    # flush the search field value\n    @search_input_field.current.value = \"\"\n\n    # call the parent event handler with the current search value\n    @props.on_search \"\"\n\n  get_search_value: ->\n    ###\n     * Return the value of the search field\n    ###\n    value = @search_input_field.current.value\n    return value\n\n  render: ->\n    if @props.show_search is no\n      return null\n\n    <div className=\"input-group input-group-sm\">\n      <input type=\"text\"\n             autofocus=\"true\"\n             className=\"form-control\"\n             ref={@search_input_field}\n             defaultValue={@props.filter}\n             onKeyPress={@on_search_field_keypress}\n             placeholder={this.props.placeholder}/>\n      <span className=\"input-group-append\">\n        <button className=\"btn btn-outline-secondary\"\n                onClick={@on_clear_button_click}>\n          <i className=\"fas fa-undo\"></i>\n        </button>\n        <button className=\"btn btn-outline-secondary\"\n                onClick={@on_search_button_click}>\n          <i className=\"fas fa-search\"></i>\n        </button>\n      </span>\n    </div>\n\nexport default SearchBox\n","import React from \"react\"\n\n\nclass Checkbox extends React.Component\n\n  ###*\n   * Checkbox Field for the Listing Table\n   *\n   * A checkbox field is identified by the column type \"checkbox\" in the listing\n   * view, e.g.  `self.columns = {\"Hidden\": {\"type\": \"checkbox\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # bind event handler to the current context\n    @on_change = @on_change.bind @\n\n  ###*\n   * Event handler when the value changed of the checkbox\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the checked status\n    checked = el.checked\n\n    console.debug \"Checkbox::on_change: checked=#{checked}\"\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, checked, @props.item\n\n    # Call the *save* field handler (no blur event here necessary)\n    if @props.save_editable_field\n      @props.save_editable_field uid, name, checked, @props.item\n\n\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <input key={@props.name}\n            type=\"checkbox\"\n            uid={@props.uid}\n            name={@props.name}\n            value={@props.value}\n            column_key={@props.column_key}\n            title={@props.title}\n            disabled={@props.disabled}\n            checked={@props.checked}\n            defaultChecked={@props.defaultChecked}\n            className={@props.className}\n            onChange={@props.onChange or @on_change}\n            tabIndex={@props.tabIndex}\n            {...@props.attrs}/>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default Checkbox\n","import React from \"react\"\n\n\nclass TableHeaderCell extends React.Component\n  ###\n   * The table header cell component renders a single header cell\n  ###\n\n  constructor: (props) ->\n    super(props)\n\n  render: ->\n    <th title={@props.title}\n        index={@props.index}\n        sort_order={@props.sort_order}\n        className={@props.className}\n        onClick={@props.onClick}>\n      <span>{@props.title}</span>\n    </th>\n\n\nexport default TableHeaderCell\n","import React from \"react\"\n\nimport Checkbox from \"./Checkbox.coffee\"\nimport TableHeaderCell from \"./TableHeaderCell.coffee\"\n\n\nclass TableHeaderRow extends React.Component\n  ###\n   * The table header row component renders a single row with cells\n  ###\n\n  constructor: (props) ->\n    super(props)\n    @on_header_column_click = @on_header_column_click.bind @\n\n  on_header_column_click: (event) ->\n    ###\n     * Event handler when a header columns was clicked\n    ###\n    el = event.currentTarget\n\n    index = el.getAttribute \"index\"\n    sort_order = el.getAttribute \"sort_order\"\n\n    if not index\n      return\n\n    console.debug \"HEADER CLICKED sort_on='#{index}' sort_order=#{sort_order}\"\n\n    # toggle the sort order if the clicked column was the active one\n    if \"active\" in el.classList\n      if sort_order == \"ascending\"\n        sort_order = \"descending\"\n      else\n        sort_order = \"ascending\"\n\n    # call the parent event handler with the sort index and the sort order\n    @props.on_header_column_click index, sort_order\n\n  is_required_column: (key) ->\n    ###\n     * Check if the column is required\n    ###\n\n    # XXX This is a workaround for a missing key within the column definition\n    folderitems = @props.folderitems or []\n    if folderitems.length == 0\n      return no\n    first_item = folderitems[0]\n    required = first_item.required or []\n    return key in required\n\n  is_sortable: (column, key) ->\n    ###\n     * Check if the column is sortable\n    ###\n    if column.sortable is no\n      return no\n    if column.index\n      return yes\n    if key in @props.sortable_columns\n      return yes\n    return no\n\n  all_selected: ->\n    ###\n     * Checks if all visible and enabled items are selected\n    ###\n    for item in @props.folderitems\n      if not item.disabled and item.uid not in @props.selected_uids\n        return no\n    return yes\n\n  build_cells: ->\n    ###\n     * Build all cells for the row\n    ###\n\n    cells = []\n\n    item = @props.item\n    checkbox_name = \"select_all\"\n    checkbox_value = \"all\"\n\n    # insert select column\n    if @props.show_select_column\n\n      # check if all visible rows are selected\n      all_selected = @all_selected()\n\n      show_select_all_checkbox = @props.show_select_all_checkbox\n\n      cells.push(\n        <th key=\"select_all\">\n          {show_select_all_checkbox and\n            <Checkbox\n              name={checkbox_name}\n              value={checkbox_value}\n              checked={all_selected}\n              onChange={@props.on_select_checkbox_checked}/>}\n        </th>\n      )\n\n    # insert table columns in the right order\n    for key in @props.visible_columns\n\n      # get the column object\n      column = @props.columns[key]\n      # check if the key is in the sortable columns\n      sortable = @is_sortable column, key\n      # sort index\n      index = column.index or key\n\n      title = column.title\n      # sort_on is the current sort index/metadata\n      sort_on = @props.sort_on or \"created\"\n      sort_order = @props.sort_order or \"ascending\"\n      # check if the current sort_on is the index of this column\n      is_sort_column = index is sort_on\n      # check if the column is required\n      required = @is_required_column key\n\n      cls = [key]\n      if sortable\n        cls.push \"sortable\"\n      if is_sort_column and sortable\n        cls.push \"active #{sort_order}\"\n      if required\n        cls.push \"required\"\n      cls = cls.join \" \"\n\n      cells.push(\n        <TableHeaderCell\n          key={key}  # internal key\n          {...@props}  # pass in all properties from the table component\n          title={title}\n          index={index}\n          sort_order={sort_order}\n          className={cls}\n          onClick={if sortable then @on_header_column_click else undefined}\n          />\n      )\n\n    return cells\n\n  render: ->\n    <tr onContextMenu={@props.on_context_menu}>\n      {@build_cells()}\n    </tr>\n\n\nexport default TableHeaderRow\n","import React from \"react\"\n\n\nclass HiddenField extends React.Component\n\n  ###*\n   * Hidden Field for the Listing Table\n   *\n   * Render this field to ensure the value is sent to the server on form submission\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <input type=\"hidden\"\n            uid={@props.uid}\n            name={@props.name}\n            value={@props.value}\n            column_key={@props.column_key}\n            className={@props.className}\n            {...@props.attrs}/>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default HiddenField\n","import React from \"react\"\n\n\nclass MultiChoice extends React.Component\n\n  ###*\n   * Multi-Choice Field for the Listing Table\n   *\n   * A multi select field is identified by the column type \"multichoice\" in the listing\n   * view, e.g.  `self.columns = {\"Result\": {\"type\": \"multichoice\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # bind event handler to the current context\n    @on_change = @on_change.bind @\n\n  ###*\n   * Event handler when the value changed of the select field\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Get the parent list wrapper\n    ul = el.parentNode.parentNode\n    # Extract all checked items\n    checked = ul.querySelectorAll(\"input[type='checkbox']:checked\")\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Prepare a list of UIDs\n    value = (input.value for input in checked)\n\n    console.debug \"MultiChoice::on_change: value=#{value}\"\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  ###*\n   * Select options builder\n   * @param options {array} list of option objects, e.g.:\n   *                        {\"ResultText\": ..., \"ResultValue\": ...}\n  ###\n  build_options: ->\n    options = []\n\n    # Sort the items alphabetically\n    sorted_options = @props.options.sort (a, b) ->\n      text_a = a.ResultText.toLowerCase()\n      text_b = b.ResultText.toLowerCase()\n      if text_a > text_b then return 1\n      if text_a < text_b then return -1\n      return 0\n\n    for option in sorted_options\n      value = option.ResultValue\n      title = option.ResultText\n      selected = option.selected or no\n      options.push(\n        <li key={value}>\n          <input type=\"checkbox\"\n                 defaultChecked={selected}\n                 uid={@props.uid}\n                 name={@props.name}\n                 value={value}\n                 onChange={@props.onChange or @on_change}\n                 column_key={@props.column_key}\n                 tabIndex={@props.tabIndex}\n                 {...@props.attrs}/> {title}\n        </li>)\n\n    return options\n\n  render: ->\n    <div className=\"multichoice\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <ul className=\"list-unstyled\">\n        {@build_options()}\n      </ul>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </div>\n\n\nexport default MultiChoice\n","import React from \"react\"\n\n\nclass MultiSelect extends React.Component\n\n  ###*\n   * MultiSelect Field for the Listing Table\n   *\n   * A multi select field is identified by the column type \"multiselect\" in the listing\n   * view, e.g.  `self.columns = {\"Result\": {\"type\": \"multiselect\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # remember the initial value\n    @state =\n      value: props.defaultValue\n\n    # bind event handler to the current context\n    @on_change = @on_change.bind @\n\n  ###*\n   * Event handler when the value changed of the select field\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Get the parent list wrapper\n    ul = el.parentNode.parentNode\n    # Extract all selected items\n    checked = ul.querySelectorAll(\"select\")\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Prepare a list of UIDs\n    value = (input.value for input in checked)\n\n    # store the new value\n    @setState\n      value: value\n\n    console.debug \"MultiSelect::on_change: name=#{name} value=#{value}\"\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  ###*\n   * Select options builder\n   * @param selected_value the option to be selected\n   * @param options {array} list of option objects, e.g.:\n   *                        {\"ResultText\": ..., \"ResultValue\": ...}\n   * @param exclude_values {array} list of option values to exclude\n  ###\n  build_options: (exclude_values) ->\n    options = []\n\n    # Possible options of the selection list\n    props_options = @props.options or []\n\n    # Exclude some options\n    props_options = props_options.filter (option) ->\n      option.ResultValue not in exclude_values\n\n    # Add an empty option to be displayed by default, but only when no empty\n    # option does not exist yet\n    empties = props_options.filter (option) -> option.ResultValue ==  \"\"\n    if empties.length == 0\n      props_options.push({ResultValue: \"\", ResultText: \"\"})\n\n    # Sort the options alphabetically\n    sorted_options = props_options.sort (a, b) ->\n      text_a = a.ResultText.toLowerCase()\n      text_b = b.ResultText.toLowerCase()\n      if text_a > text_b then return 1\n      if text_a < text_b then return -1\n      return 0\n\n    # Add the options to the selection list\n    for option in sorted_options\n      value = option.ResultValue\n      title = option.ResultText\n      options.push(\n        <option value={value}>{title}</option>\n      )\n\n    return options\n\n  ###\n   * Converts the value to an array\n  ###\n  to_array: (value) ->\n    if not value\n      return []\n    if Array.isArray(value)\n      return value\n    return JSON.parse value\n\n  ###\n   * Selectors list builder. Generates a list with as many select elements as\n   * values passed-in. Each selector contains all the options for selection,\n   * with the option that matches with the value selected\n   * @param values {array} list of selected ResultValues\n   * @param options {array} list of option objects, e.g.:\n   *                        {\"ResultText\": ..., \"ResultValue\": ...}\n  ###\n  build_selectors: ->\n    # Convert the result to an array\n    values = @to_array @state.value\n\n    # filter out empties\n    values = values.filter (value) -> value isnt \"\"\n\n    excluded_values = []\n    if @props.duplicates\n      # Duplicates allowed. Add an empty selector at the end\n      values.push(\"\")\n    else\n      # Values exclusion\n      excluded_values = values\n\n      # Add an empty selector at the end, but only if there are still options\n      # available for selection\n      options = @props.options or []\n      if values.length < options.length\n        values.push(\"\")\n\n    # Build the selectors\n    selectors = []\n    exclude_values = []\n    for selected_value in values\n      console.log \"MultiSelect::build_selectors:value='#{selected_value}'\"\n      excluded = excluded_values.filter (value) -> value isnt selected_value\n      selectors.push(\n        <li key={selected_value}>\n          <select value={selected_value}\n                  uid={@props.uid}\n                  name={@props.name}\n                  onChange={@props.onChange or @on_change}\n                  column_key={@props.column_key}\n                  className={@props.className}\n                  {...@props.attrs}>\n            {@build_options(excluded)}\n          </select>\n        </li>\n      )\n\n    return selectors\n\n  render: ->\n    <div className=\"multiselect\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <ul className=\"list-unstyled\" tabIndex={@props.tabIndex}>\n        {@build_selectors()}\n      </ul>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </div>\n\n\nexport default MultiSelect\n","import React from \"react\"\n\n\nclass NumericField extends React.Component\n\n  ###*\n   * Numeric Field for the Listing Table\n   *\n   * A numeric field is identified by the column type \"numeric\" in the listing\n   * view, e.g.  `self.columns = {\"Result\": {\"type\": \"numeric\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # remember the initial value\n    @state =\n      value: props.defaultValue\n\n    # bind event handler to the current context\n    @on_blur = @on_blur.bind @\n    @on_change = @on_change.bind @\n\n  ###*\n   * componentDidUpdate(prevProps, prevState, snapshot)\n   * This is invoked immediately after updating occurs.\n   * This method is not called for the initial render.\n  ###\n  componentDidUpdate: (prevProps) ->\n    if @props.defaultValue != prevProps.defaultValue\n      @setState value: @props.defaultValue\n\n  ###*\n   * Event handler when the mouse left the numeric field\n   * @param event {object} ReactJS event object\n  ###\n  on_blur: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the numeric field\n    value = el.value\n    # Remove any trailing dots\n    value = value.replace(/\\.*$/, \"\")\n    # Set the sanitized value back to the field\n    el.value = value\n\n    console.debug \"NumericField::on_blur: value=#{value}\"\n\n    # Call the *save* field handler with the UID, name, value\n    if @props.save_editable_field\n      @props.save_editable_field uid, name, value, @props.item\n\n  ###*\n   * Event handler when the value changed of the numeric field\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the numeric field\n    value = el.value\n    # Convert the value to float\n    value = @to_float value\n    # Set the float value back to the field\n    el.value = value\n\n    # store the new value\n    @setState\n      value: value\n\n    console.debug \"NumericField::on_change: value=#{value}\"\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  ###*\n   * Float converter\n   * @param value {string} a numeric string value\n  ###\n  to_float: (value) ->\n    # Valid -.5; -0.5; -0.555; .5; 0.5; 0.555\n    #       -,5; -0,5; -0,555; ,5; 0,5; 0,555\n    # Non Valid: -.5.5; 0,5,5; ...;\n    value = value.replace /(^[-,<,>]?)(\\d*)([\\.,]?\\d*)(.*)/, \"$1$2$3\"\n    value = value.replace(\",\", \".\")\n    return value\n\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <input type=\"text\"\n             size={@props.size or 5}\n             uid={@props.uid}\n             name={@props.name}\n             value={@state.value}\n             column_key={@props.column_key}\n             title={@props.title}\n             disabled={@props.disabled}\n             required={@props.required}\n             className={@props.className}\n             placeholder={@props.placeholder}\n             onBlur={@props.onBlur or @on_blur}\n             onChange={@props.onChange or @on_change}\n             tabIndex={@props.tabIndex}\n             {...@props.attrs}/>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default NumericField\n","import React from \"react\"\n\n\nclass CalculatedField extends React.Component\n\n  ###*\n   * Calculated Field for the Listing Table\n   *\n   * Basically like a *disabled* numeric field, but with a controlled value\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <input type=\"text\"\n             size={@props.size or 5}\n             uid={@props.uid}\n             name={@props.name}\n             value={@props.value or \"\"}\n             column_key={@props.column_key}\n             title={@props.title}\n             disabled={yes}\n             required={@props.required}\n             className={@props.className}\n             placeholder={@props.placeholder}\n             tabIndex=\"-1\"\n             {...@props.attrs}/>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default CalculatedField\n","import React from \"react\"\n\n\nclass ReadonlyField extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n  is_boolean_field: ->\n    if typeof(@props.value) == \"boolean\"\n      return yes\n    return no\n\n  render: ->\n    if @is_boolean_field()\n      if @props.value\n        return <span>{_t(\"Yes\")}</span>\n      else\n        return <span>{_t(\"No\")}</span>\n    else\n      return (\n        <span className={@props.className}>\n          {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n          <span dangerouslySetInnerHTML={{__html: @props.formatted_value}} {...@props.attrs}></span>\n          {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n        </span>\n      )\n\n\nexport default ReadonlyField\n","import React from \"react\"\n\n\nclass Select extends React.Component\n\n  ###*\n   * Select Field for the Listing Table\n   *\n   * A select field is identified by the column type \"choices\" in the listing\n   * view, e.g.  `self.columns = {\"Result\": {\"type\": \"choices\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n    # remember the initial value\n    @state =\n      value: props.defaultValue or \"\"\n\n    # bind event handler to the current context\n    @on_blur = @on_blur.bind @\n    @on_change = @on_change.bind @\n\n  ###*\n   * componentDidUpdate(prevProps, prevState, snapshot)\n   * This is invoked immediately after updating occurs.\n   * This method is not called for the initial render.\n  ###\n  componentDidUpdate: (prevProps) ->\n    if @props.defaultValue isnt prevProps.defaultValue\n      @setState value: @props.defaultValue\n\n  ###*\n   * Event handler when the mouse left the select field\n   * @param event {object} ReactJS event object\n  ###\n  on_blur: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the numeric field\n    value = el.value\n    @setState value: value\n\n    console.debug \"Select::on_blur: value=#{value}\"\n\n    # Call the *save* field handler with the UID, name, value\n    if @props.save_editable_field\n      @props.save_editable_field uid, name, value, @props.item\n\n  ###*\n   * Event handler when the value changed of the select field\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the numeric field\n    value = el.value\n\n    # Only propagate for new values\n    if value == @state.value\n      return\n\n    console.debug \"Select::on_change: value=#{value}\"\n\n    # store the new value\n    @setState value: value\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  ###*\n   * Select options builder\n   * @param options {array} list of option objects, e.g.:\n   *                        {\"ResultText\": ..., \"ResultValue\": ...}\n  ###\n  build_options: ->\n    options = []\n\n    sorted_options = @props.options.sort (a, b) ->\n      text_a = a.ResultText\n      text_b = b.ResultText\n      if text_a > text_b then return 1\n      if text_a < text_b then return -1\n      return 0\n\n    for option in sorted_options\n      value = option.ResultValue\n      title = option.ResultText\n      options.push(\n        <option key={value}\n                value={value}>\n          {title}\n        </option>)\n\n    return options\n\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <select key={@props.name}\n              uid={@props.uid}\n              name={@props.name}\n              value={@state.value}\n              column_key={@props.column_key}\n              title={@props.title}\n              disabled={@props.disabled}\n              onBlur={@props.onBlur or @on_blur}\n              onChange={@props.onChange or @on_change}\n              required={@props.required}\n              className={@props.className}\n              tabIndex={@props.tabIndex}\n              {...@props.attrs}>\n        {@build_options()}\n      </select>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default Select\n","import React from \"react\"\n\n\nclass StringField extends React.Component\n\n  ###*\n   * String Field for the Listing Table\n   *\n   * A string field is identified by the column type \"string\" in the listing\n   * view, e.g.  `self.columns = {\"Result\": {\"type\": \"string\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # remember the initial value\n    @state =\n      value: props.defaultValue\n\n    # bind event handler to the current context\n    @on_change = @on_change.bind @\n\n  ###*\n   * componentDidUpdate(prevProps, prevState, snapshot)\n   * This is invoked immediately after updating occurs.\n   * This method is not called for the initial render.\n  ###\n  componentDidUpdate: (prevProps) ->\n    if @props.defaultValue != prevProps.defaultValue\n      @setState value: @props.defaultValue\n\n  ###*\n   * Event handler when the value changed of the string field\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key attribute\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the string field\n    value = el.value\n\n    # store the new value\n    @setState\n      value: value\n\n    console.debug \"StringField::on_change: value=#{value}\"\n\n    # Call the *update* field handler\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  render: ->\n    <span className=\"form-group\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <input type=\"text\"\n             size={@props.size or 20}\n             uid={@props.uid}\n             name={@props.name}\n             value={@state.value}\n             column_key={@props.column_key}\n             title={@props.title}\n             disabled={@props.disabled}\n             required={@props.required}\n             className={@props.className}\n             placeholder={@props.placeholder}\n             onChange={@props.onChange or @on_change}\n             tabIndex={@props.tabIndex}\n             {...@props.attrs}/>\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </span>\n\n\nexport default StringField\n","import React from \"react\"\n\nimport Checkbox from \"./Checkbox.coffee\"\nimport HiddenField from \"./HiddenField.coffee\"\nimport MultiChoice from \"./MultiChoice.coffee\"\nimport MultiSelect from \"./MultiSelect.coffee\"\nimport NumericField from \"./NumericField.coffee\"\nimport CalculatedField from \"./CalculatedField.coffee\"\nimport ReadonlyField from \"./ReadonlyField.coffee\"\nimport Select from \"./Select.coffee\"\nimport StringField from \"./StringField.coffee\"\n\n\nclass TableCell extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n    # Zope Publisher Converter Argument Mapping\n    @ZPUBLISHER_CONVERTER = {\n      \"boolean\": \":record:ignore_empty\"\n      \"select\": \":records\"\n      \"choices\": \":records\"\n      \"multiselect\": \":list\"\n      \"multichoice\": \":list\"\n      \"numeric\": \":records\"\n      \"string\": \":records\"\n      \"readonly\": \"\"\n      \"default\": \":records\"\n    }\n\n  get_item: ->\n    return @props.item\n\n  get_column_key: ->\n    return @props.column_key\n\n  render_before_content: (props={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    return unless item\n    before = item.before\n    if column_key not of before\n      return null\n    # support to render React components\n    before_components = item.before_components or {}\n    return (\n      <span key={column_key + \"_before\"}\n            className=\"before-item\">\n        {before_components[column_key]}\n        <span dangerouslySetInnerHTML={{__html: before[column_key]}} {...props}></span>\n      </span>)\n\n  render_after_content: (props={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    return unless item\n    after = item.after\n    if column_key not of after\n      return null\n    # support to render React components\n    after_components = item.after_components or {}\n    return (\n      <span key={column_key + \"_after\"}\n            className=\"after-item\">\n        {after_components[column_key]}\n        <span dangerouslySetInnerHTML={{__html: after[column_key]}} {...props}></span>\n      </span>)\n\n  is_edit_allowed: ->\n    column_key = @get_column_key()\n    item = @get_item()\n\n    # the global allow_edit overrides all row specific settings\n    if not @props.allow_edit\n      return no\n\n    # check if the field is listed in the item's allow_edit list\n    if column_key in item.allow_edit\n      return yes\n\n    return no\n\n  is_disabled: ->\n    item = @get_item()\n    disabled = item.disabled\n    if disabled in [yes, no]\n      return disabled\n\n    return no unless disabled?\n\n    # check if the field is listed in the item's disabled list\n    column_key = @get_column_key()\n    return column_key in disabled\n\n  is_required: ->\n    column_key = @get_column_key()\n    item = @get_item()\n    required_fields = item.required or []\n    required = column_key in required_fields\n    # make the field conditionally required if the row is selected\n    selected = @props.selected\n    return required and selected\n\n  get_name: ->\n    uid = @get_uid()\n    column_key = @get_column_key()\n    return \"#{column_key}.#{uid}\"\n\n  get_uid: ->\n    item = @get_item()\n    return item.uid\n\n  is_selected: ->\n    item = @get_item()\n    return item.uid in @props.selected_uids\n\n  get_value: ->\n    column_key = @get_column_key()\n    item = @get_item()\n    value = item[column_key]\n\n    # check if the field is an interim\n    interims = @get_interimfields()\n    if interims.hasOwnProperty column_key\n        # extract the value from the interim field\n        # {value: \"\", keyword: \"\", formatted_value: \"\", unit: \"\", title: \"\"}\n        value = interims[column_key].value or \"\"\n\n    # values of input fields should not be null\n    if value is null\n      value = \"\"\n\n    return value\n\n  ###\n  Returns the size for the folderitem or interim field\n  ###\n  get_size: ->\n    size = 5\n    item = @get_item()\n    if item.hasOwnProperty \"size\"\n      size = item.size\n\n    # Maybe is an interim field\n    if @is_interimfield()\n      column_key = @get_column_key()\n      interim = item[column_key]\n      if interim and interim.hasOwnProperty \"size\"\n        size = interim.size\n\n    return size\n\n  ###*\n   *  Returns the unit of the interimfield or of the folderitem\n  ###\n  get_formatted_unit: ->\n    column_key = @get_column_key()\n    item = @get_item()\n    unit = item.Unit\n    # extract the unit from the interim field\n    # {value: \"\", keyword: \"\", formatted_value: \"\", unit: \"\", title: \"\"}\n    if @is_interimfield()\n      unit = item[column_key].unit\n    if not unit\n      return \"\"\n    return \"<span class='unit'>#{unit}</span>\"\n\n  ###*\n   * Create a mapping of interim keyword -> interim field\n   *\n   * Interim fields are record fields with a format like this:\n   * {value: \"\", keyword: \"\", formatted_value: \"\", unit: \"\", title: \"\"}\n  ###\n  get_interimfields: ->\n    item = @get_item()\n    interims = item.interimfields or []\n    mapping = {}\n    interims.map (item, index) ->\n      mapping[item.keyword] = item\n    return mapping\n\n  is_interimfield: ->\n    column_key = @get_column_key()\n    interims = @get_interimfields()\n    return interims.hasOwnProperty column_key\n\n  get_choices: ->\n    item = @get_item()\n    return item.choices or {}\n\n  is_result_column: ->\n    column_key = @get_column_key()\n    if column_key == \"Result\"\n      return yes\n    return no\n\n  get_formatted_value: ->\n    column_key = @get_column_key()\n    item = @get_item()\n\n    # replacement html or plain value of the current column\n    formatted_value = item.replace[column_key] or @get_value()\n\n    # use the formatted result\n    if @is_result_column()\n      formatted_value = item.formatted_result or formatted_value\n      # Append the unit to the formatted value\n      if formatted_value\n        formatted_value += @get_formatted_unit()\n    else if @is_interimfield()\n      # Append the unit to the formatted value\n      if formatted_value\n        formatted_value += @get_formatted_unit()\n\n    return formatted_value\n\n  get_type: ->\n    column_key = @get_column_key()\n    item = @get_item()\n\n    # true if the field is editable\n    editable = @is_edit_allowed()\n    resultfield = @is_result_column()\n\n    # readonly field\n    if not editable\n      return \"readonly\"\n\n    # calculated fields are also in editable mode readonly\n    if resultfield and item.calculation\n      return \"calculated\"\n\n    # type definition of the column has precedence\n    column = @props.column or {}\n    if \"type\" of column\n      return column[\"type\"]\n\n    # check if the field is a boolean\n    value = @get_value()\n    if typeof(value) == \"boolean\"\n      return \"boolean\"\n\n    # check if the field is listed in choices\n    choices = @get_choices()\n    if column_key of choices\n      # check if the field is a multi-choices\n      default_type = \"select\"\n      if resultfield\n        return item.result_type or default_type\n      return default_type\n\n    # check if the field is an interim\n    if @is_interimfield()\n      return \"interim\"\n\n    # check if the field is a string field\n    if resultfield\n      return item.result_type or \"numeric\"\n\n    # the default\n    return \"numeric\"\n\n  ###*\n   * Creates a readonly field component\n   * @param props {object} properties passed to the component\n   * @returns ReadonlyField component\n  ###\n  create_readonly_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    formatted_value = @get_formatted_value()\n    uid = @get_uid()\n    css_class = \"readonly\"\n\n    return (\n      <ReadonlyField\n        key={name}\n        uid={uid}\n        name={name}\n        value={value}\n        formatted_value={formatted_value}\n        className={css_class}\n        {...props}\n        />)\n\n  ###*\n   * Creates a calculated field component\n   * @param props {object} properties passed to the component\n   * @returns CalculatedField component\n  ###\n  create_calculated_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    formatted_value = @get_formatted_value()\n    unit = @get_formatted_unit()\n    uid = @get_uid()\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    required = @is_required()\n    css_class = \"form-control input-sm calculated\"\n    if required then css_class += \" required\"\n\n    return (\n      <CalculatedField\n        key={name}\n        uid={uid}\n        item={item}\n        name={name}\n        value={value}\n        column_key={column_key}\n        title={title}\n        formatted_value={formatted_value}\n        placeholder={title}\n        selected={selected}\n        required={required}\n        className={css_class}\n        after={unit}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        {...props}\n        />)\n\n  ###*\n   * Creates a hidden field component\n   * @param props {object} properties passed to the component\n   * @returns HiddenField component\n  ###\n  create_hidden_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    formatted_value = @get_formatted_value()\n    uid = @get_uid()\n    title = @props.column.title or column_key\n\n    return (\n      <HiddenField\n        key={name + \"_hidden\"}\n        uid={uid}\n        name={name}\n        value={value}\n        column_key={column_key}\n        {...props}\n        />)\n\n  ###*\n   * Creates a numeric field component\n   * @param props {object} properties passed to the component\n   * @returns NumericField component\n  ###\n  create_numeric_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    formatted_value = @get_formatted_value()\n    unit = @get_formatted_unit()\n    uid = @get_uid()\n    converter = @ZPUBLISHER_CONVERTER[\"numeric\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    size = @get_size()\n    css_class = \"form-control input-sm\"\n    if required then css_class += \" required\"\n\n    return (\n      <NumericField\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        defaultValue={value}\n        column_key={column_key}\n        title={title}\n        formatted_value={formatted_value}\n        placeholder={title}\n        selected={selected}\n        disabled={disabled}\n        required={required}\n        className={css_class}\n        after={unit}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        size={size}\n        {...props}\n        />)\n\n  ###*\n   * Creates a string field component\n   * @param props {object} properties passed to the component\n   * @returns StringField component\n  ###\n  create_string_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    formatted_value = @get_formatted_value()\n    unit = @get_formatted_unit()\n    uid = @get_uid()\n    converter = @ZPUBLISHER_CONVERTER[\"string\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    css_class = \"form-control input-sm\"\n    if required then css_class += \" required\"\n\n    return (\n      <StringField\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        defaultValue={value}\n        column_key={column_key}\n        title={title}\n        formatted_value={formatted_value}\n        placeholder={title}\n        selected={selected}\n        disabled={disabled}\n        required={required}\n        className={css_class}\n        after={unit}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        {...props}\n        />)\n\n  ###*\n   * Creates a select field component\n   * @param props {object} properties passed to the component\n   * @returns SelectField component\n  ###\n  create_select_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    options = item.choices[column_key] or []\n    formatted_value = @get_formatted_value()\n    uid = @get_uid()\n    converter = @ZPUBLISHER_CONVERTER[\"select\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    css_class = \"form-control input-sm\"\n    if required then css_class += \" required\"\n\n    return (\n      <Select\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        defaultValue={value}\n        column_key={column_key}\n        title={title}\n        disabled={disabled}\n        selected={selected}\n        required={required}\n        options={options}\n        className={css_class}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        {...props}\n        />)\n\n  ###*\n   * Creates a multichoice field component\n   * @param props {object} properties passed to the component\n   * @returns MultiChoice component\n  ###\n  create_multichoice_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    # convert value to array\n    if value.length > 0\n      value = JSON.parse value\n    options = item.choices[column_key] or []\n    # mark selected options\n    options.forEach (option) ->\n      selected = no\n      if Array.isArray value\n        selected = value.indexOf(option.ResultValue) > -1\n      option.selected = selected\n    formatted_value = @get_formatted_value()\n    uid = @get_uid()\n    converter = @ZPUBLISHER_CONVERTER[\"multichoice\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    css_class = \"form-control input-sm\"\n    if required then css_class += \" required\"\n\n    return (\n      <MultiChoice\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        column_key={column_key}\n        title={title}\n        disabled={disabled}\n        selected={selected}\n        required={required}\n        options={options}\n        className={css_class}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        {...props}\n        />)\n\n  ###*\n   * Creates a multiselect field component\n   * @param props {object} properties passed to the component\n   * @returns MultiSelect component\n  ###\n  create_multiselect_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    uid = @get_uid()\n    name = @get_name()\n    value = @get_value()\n    options = item.choices[column_key] or []\n    formatted_value = @get_formatted_value()\n    converter = @ZPUBLISHER_CONVERTER[\"multiselect\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    duplicates = item.result_type == \"multiselect_duplicates\"\n    css_class = \"form-control input-sm\"\n    if required then css_class += \" required\"\n\n    return (\n      <MultiSelect\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        defaultValue={value}\n        value={value}\n        column_key={column_key}\n        title={title}\n        disabled={disabled}\n        selected={selected}\n        required={required}\n        options={options}\n        duplicates={duplicates}\n        className={css_class}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        {...props}\n        />)\n\n  ###*\n   * Creates a checkbox field component\n   * @param props {object} properties passed to the component\n   * @returns Checkbox component\n  ###\n  create_checkbox_field: ({props}={}) ->\n    column_key = @get_column_key()\n    item = @get_item()\n    props ?= {}\n\n    name = @get_name()\n    value = @get_value()\n    options = item.choices[column_key] or []\n    formatted_value = @get_formatted_value()\n    uid = @get_uid()\n    converter = @ZPUBLISHER_CONVERTER[\"boolean\"]\n    fieldname = name + converter\n    title = @props.column.title or column_key\n    selected = @is_selected()\n    disabled = @is_disabled()\n    required = @is_required()\n    css_class = \"checkbox\"\n    if required then css_class += \" required\"\n\n    return (\n      <Checkbox\n        key={name}\n        uid={uid}\n        item={item}\n        name={fieldname}\n        value=\"on\"\n        column_key={column_key}\n        title={title}\n        defaultChecked={value}\n        disabled={disabled}\n        className={css_class}\n        update_editable_field={@props.update_editable_field}\n        save_editable_field={@props.save_editable_field}\n        tabIndex={@props.tabIndex}\n        {...props}\n        />)\n\n  render_content: ->\n    # the current rendered column cell name\n    column_key = @get_column_key()\n    # single folderitem\n    item = @get_item()\n    # return if there is no item\n    if not item\n      console.warn \"Skipping empty folderitem for column '#{column_key}'\"\n      return null\n    # the UID of the folderitem\n    uid = @get_uid()\n    # field type to render\n    type = @get_type()\n    # the field to return\n    field = []\n\n    if type == \"readonly\"\n      field = field.concat @create_readonly_field()\n    else if type == \"calculated\"\n      field = field.concat @create_calculated_field()\n    else if type == \"interim\"\n      field = field.concat @create_numeric_field()\n    else if type in [\"select\", \"choices\"]\n      field = field.concat @create_select_field()\n    else if type in [\"multichoice\"]\n      field = field.concat @create_multichoice_field()\n    else if type in [\"multiselect\", \"multiselect_duplicates\" ]\n      field = field.concat @create_multiselect_field()\n    else if type == \"boolean\"\n      field = field.concat @create_checkbox_field()\n    else if type == \"numeric\"\n      field = field.concat @create_numeric_field()\n    else if type == \"string\"\n      field = field.concat @create_string_field()\n\n    return field\n\n  render: ->\n    <td className={@props.className}\n        colSpan={@props.colspan}\n        rowSpan={@props.rowspan}>\n      <div className=\"form-group\">\n        {@render_before_content()}\n        {@render_content()}\n        {@render_after_content()}\n      </div>\n    </td>\n\n\nexport default TableCell\n","import React from \"react\"\n\n\nclass RemarksField extends React.Component\n\n  ###*\n   * Collapsible Remarks Field for the Listing Table\n   *\n   * A remarks field is identified by the column type \"remarks\" in the listing\n   * view, e.g.  `self.columns = {\"Remarks\": {\"type\": \"remarks\"}, ... }`\n   *\n  ###\n  constructor: (props) ->\n    super(props)\n    # Bind events to local context\n    @on_blur = @on_blur.bind @\n    @on_change = @on_change.bind @\n\n  ###*\n   * Event handler when the mouse left the textarea\n   * @param event {object} ReactJS event object\n  ###\n  on_blur: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key (usually `Remarks`)\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the textarea\n    value = el.value\n    console.debug \"RemarksField:on_blur: value=#{value}\"\n\n    # Call the *save* field handler with the UID, name, value\n    if @props.save_editable_field\n      @props.save_editable_field uid, name, value, @props.item\n\n  ###*\n   * Event handler when the value changed of the textarea\n   * @param event {object} ReactJS event object\n  ###\n  on_change: (event) ->\n    el = event.currentTarget\n    # Extract the UID attribute\n    uid = el.getAttribute(\"uid\")\n    # Extract the column_key (usually `Remarks`)\n    name = el.getAttribute(\"column_key\") or el.name\n    # Extract the value of the textarea\n    value = el.value\n    console.debug \"RemarksField:on_change: value=#{value}\"\n\n    # Call the *update* field handler with the UID, name, value\n    if @props.update_editable_field\n      @props.update_editable_field uid, name, value, @props.item\n\n  ###*\n   * Check if the remarks field is editable or not\n   * @param item {object} the folderitem containing the {\"Remarks\": \"...\"} data\n   * @param column_key {string} the current rendered column key (usually `Remarks`)\n  ###\n  can_edit: ->\n    item = @props.item\n    column_key = @props.column_key\n    allow_edit = item.allow_edit or []\n    return column_key in allow_edit\n\n  ###*\n   * Get the title of the column object, e.g.: self.columns = {\"Remarks\": {\"title\": \"...\"}}\n   * @param columns {object} as defined in the browser listing view\n   * @param column {object} the remarks column definition\n  ###\n  get_column_title: ->\n    columns = @props.columns\n    column_key = @props.column_key\n    column = columns[column_key]\n    title = column.title or \"Remarks\"\n    if (typeof _ == \"function\") then title = _(title)\n    return title\n\n  ###*\n   * Compute the inline CSS style for the field\n   * @param uid {string} UID of the folderitem\n   * @param expanded_remarks {array} list of expanded remarks fields\n  ###\n  get_style: ->\n    uid = @props.uid\n    # show if the remarks are expanded or if a remark is set\n    show = uid in @props.expanded_remarks or @props.value.length > 0\n    style =\n      display: if show then \"block\" else \"none\"\n    return style\n\n  ###*\n   * Render the editable/readonly remarks field\n   * @param uid {string} UID of the folderitem\n   * @param column_key {string} the current rendered column key (usually `Remarks`)\n   * @param item {object} the folderitem containing the {\"Remarks\": \"...\"} data\n  ###\n  render_remarks_field: ->\n    uid = @props.uid\n    column_key = @props.column_key\n    name = \"#{column_key}.#{uid}:records\"\n    value = @props.value\n\n    if not @can_edit()\n      field = (\n        <span className=\"remarksfield\"\n              dangerouslySetInnerHTML={{__html: value}}/>)\n    else\n      field = (\n        <textarea\n          className=\"remarksfield form-control\"\n          uid={uid}\n          column_key={column_key}\n          style={{width: \"100%\"}}\n          rows={@props.rows or 2}\n          name={name}\n          onBlur={@props.onBlur or @on_blur}\n          onChange={@props.onChange or @on_change}\n          defaultValue={value}\n          tabIndex={@props.tabIndex}\n          {...@props.attrs}>\n        </textarea>)\n\n    return field\n\n  render: ->\n    if not @props.uid\n      return null\n    <div style={@get_style()}\n         className=\"remarks text-muted\">\n      {@props.before and <span className=\"before_field\" dangerouslySetInnerHTML={{__html: @props.before}}></span>}\n      <div className=\"text-info\">\n        <i className=\"fas fa-hand-point-right\"/> {@get_column_title()}:\n      </div>\n      {@render_remarks_field()}\n      {@props.after and <span className=\"after_field\" dangerouslySetInnerHTML={{__html: @props.after}}></span>}\n    </div>\n\n\nexport default RemarksField\n","import React from \"react\"\n\nimport Checkbox from \"./Checkbox.coffee\"\nimport TableCell from \"./TableCell.coffee\"\nimport RemarksField from \"./RemarksField.coffee\"\n\n###*\n * This component is currently only used for the Transposed Layout in Worksheets\n###\nclass TableTransposedCell extends TableCell\n\n  ###*\n   * Get the transposed folderitem\n   *\n   * also see bika.lims.browser.worksheet.views.analyses_transposed.py\n   *\n   * The \"transposed item\" is the original folderitem, which is stored below the\n   * `column_key` of the transposed column, e.g.\n   *\n   * columns: {1: {…}, 2: {…}, column_key: {…}}\n   * folderitems: [\n   *   {1: {original-folderitem}, 2: {original-folderitem}, item_key: \"Pos\", column_key: \"Positions\"},\n   *   {1: {original-folderitem}, 2: {original-folderitem}, item_key: \"Result\", column_key: \"Calcium\"},\n   *   {1: {original-folderitem}, 2: {original-folderitem}, item_key: \"Result\", column_key: \"Magnesiumn\"},\n   * ]\n  ###\n  get_item: ->\n    # @props.item: transposed folderitem (see TableCells.coffee)\n    # @props.column_key: current column key rendered, e.g. \"1\", \"2\", \"column_key\"\n    return @props.item[@props.column_key]\n\n  ###*\n   * Get the value within the transposed folderitem to render\n   *\n   * also see bika.lims.browser.worksheet.views.analyses_transposed.py\n   *\n   * The `item_key` (see also above) within a transposed folderitems item,\n   * points to the value to be rendered from the original folderitem.\n   *\n  ###\n  get_column_key: ->\n    # @props.item is a transposed folderitem\n    # @props.column_key is the actual column key rendered, e.g. \"1\", \"2\", \"column_key\"\n    return @props.item.item_key or @props.item.column_key\n\n  ###*\n   * Calculate CSS Class for the <td> cell based on the original folderitem\n  ###\n  get_css: ->\n    item = @get_item()\n    css = [\"transposed\", @props.className]\n    if @is_result_column()\n      css.push \"result\"\n    if not item\n      css.push \"empty\"\n    else\n      css.push item.state_class\n      if item.uid in @props.selected_uids\n        css.push \"info\"\n    return css.join \" \"\n\n  get_remarks_columns: ->\n    columns = []\n    for key, value of @props.columns\n      if value.type == \"remarks\"\n        columns.push key\n    return columns\n\n  ###*\n   * Creates a select checkbox for the original folderitem\n   * @param props {object} properties passed to the component\n   * @returns ReadonlyField component\n  ###\n  create_select_checkbox: ({props}={}) ->\n    props ?= {}\n    uid = @get_uid()\n    name = \"#{@props.select_checkbox_name}:list\"\n    disabled = @is_disabled()\n    selected = @is_selected()\n    return (\n      <div key=\"select\" className=\"checkbox\">\n        <Checkbox\n          name={name}\n          value={uid}\n          disabled={disabled}\n          checked={selected}\n          onChange={@props.on_select_checkbox_checked}\n          {...props}\n          />\n      </div>)\n\n  ###*\n   * Creates all interim fields\n   * @param props {object} properties passed to the component\n   * @returns Interim Fields\n  ###\n  create_interim_fields: ({props}={}) ->\n    props ?= {}\n    uid = @get_uid()\n    item = @get_item()\n    fields = []\n    interims = item.interimfields or []\n    # [{value: 10, keyword: \"F_cl\", formatted_value: \"10,0\", unit: \"mg/mL\", title: \"Faktor cl\"}, ...]\n    for interim, index in interims\n      # get the keyword of the interim field\n      keyword = interim.keyword\n      # skip interims which are not listed in the columns\n      # -> see: bika.lims.browser.analyses.view.folderitems\n      continue unless @props.columns.hasOwnProperty keyword\n      # get the unit of the interim\n      unit = interim.unit or \"\"\n      # title / keyword\n      title = interim.title or keyword\n      # field size\n      size = interim.size or 5\n      # prepare the field properties\n      props =\n        key: keyword\n        column_key: keyword\n        name: \"#{keyword}.#{uid}\"\n        defaultValue: interim.value\n        placeholder: title\n        formatted_value: interim.formatted_value\n        size: size\n        before: \"<span>#{title}</span>\"\n        after: \"<span>#{unit}</span>\"\n\n      if @is_edit_allowed()\n        # add a numeric field per interim\n        props.className = \"form-control input-sm interim\"\n        fields = fields.concat @create_numeric_field props: props\n      else\n        props.className = \"readonly interim\"\n        fields = fields.concat @create_readonly_field props: props\n\n    return fields\n\n  ###*\n   * Render the fields for a single transposed cell\n   * @param column_key {object} properties passed to the component\n   * @returns fields {array}\n  ###\n  render_content: ->\n    # the current rendered column ID\n    column_key = @get_column_key()\n    # single folderitem\n    item = @get_item()\n    # return if there is no item\n    if not item\n      console.debug \"Skipping empty item for '#{column_key}' in column '#{@props.column_key}'\"\n      return null\n    # the UID of the original folderitem\n    uid = @get_uid()\n    # field type to render\n    type = @get_type()\n\n    # the fields to return\n    fields = []\n\n    # We deal only with result columns in transposed view for now\n    if not @is_result_column\n      return\n\n    # Get the Result column\n    result_column = @props.columns[\"Result\"]\n    result_column_title = result_column.title\n\n    # Each item can render a piece of HTML, which is defined in the before/after\n    # key of the folderitem.\n    # To add a controlled ReactJS component (with callbacks etc.), we inject here\n    # a checkbox and the remarks button into the item['before_components'].\n    # This is handled then by `render_before_content` and `render_after_content`.\n    before_components = {}\n    # Add a select checkbox for result cells\n    before_components[column_key] = [@create_select_checkbox()]\n    # Append remarks toggle\n\n    if @get_remarks_columns().length > 0\n      before_components[column_key].push(\n        <a key={uid + \"_remarks\"}\n            href=\"#\"\n            className=\"transposed_remarks\"\n            uid={uid}\n            onClick={@props.on_remarks_expand_click}>\n          <i className=\"remarksicon fas fa-comment\"></i>\n        </a>)\n    item[\"before_components\"] = before_components\n\n    # E.g. a submitted result\n    if type == \"readonly\"\n      fields = fields.concat @create_interim_fields()\n      fields = fields.concat @create_readonly_field()\n    else\n      # interims first\n      fields = fields.concat @create_interim_fields()\n\n      # calculated field\n      if type == \"calculated\"\n        fields = fields.concat @create_calculated_field\n          props:\n            before: \"<span>#{result_column_title}</span>\"\n            after: \"<span>#{item.Unit or ''}</span>\"\n      else\n        # editable choices field\n        if column_key of @get_choices()\n          fields = fields.concat @create_select_field()\n        else\n          # editable numeric field\n          fields = fields.concat @create_numeric_field()\n\n    # Append Remarks field(s)\n    for column_key, column_index in @get_remarks_columns()\n      value = item[column_key]\n      fields.push(\n        <div key={column_index + \"_remarks\"}>\n          <RemarksField\n            {...@props}\n            uid={uid}\n            item={item}\n            column_key={column_key}\n            value={item[column_key]}\n          />\n        </div>)\n\n    # Append Attachments\n    if item.replace.Attachments\n      fields = fields.concat @create_readonly_field\n          props:\n            key: column_index + \"_attachments\"\n            uid: uid\n            item: item\n            column_key: \"Attachments\"\n            formatted_value: item.replace.Attachments\n            attrs:\n              style: {display: \"block\"}\n\n    return fields\n\n  render: ->\n    <td className={@get_css()}\n        colSpan={@props.colspan}\n        rowSpan={@props.rowspan}>\n      <div className=\"form-group\">\n        {@render_before_content()}\n        {@render_content()}\n        {@render_after_content()}\n      </div>\n    </td>\n\nexport default TableTransposedCell\n","import React from \"react\"\nimport Checkbox from \"./Checkbox.coffee\"\nimport TableCell from \"./TableCell.coffee\"\nimport TableTransposedCell from \"./TableTransposedCell.coffee\"\n\n\nclass TableCells extends React.Component\n\n  constructor: (props) ->\n    super(props)\n    @on_remarks_expand_click = @on_remarks_expand_click.bind @\n\n  on_remarks_expand_click: (event) ->\n    event.preventDefault()\n    el = event.currentTarget\n    uid = el.getAttribute \"uid\"\n\n    # notify parent event handler with the extracted uid\n    if @props.on_remarks_expand_click\n      @props.on_remarks_expand_click uid\n\n  get_column: (column_key) ->\n    return @props.columns[column_key]\n\n  get_item: ->\n    return @props.item\n\n  get_uid: ->\n    item = @get_item()\n    return item.uid\n\n  get_tab_index: (column_key, item) ->\n    tabindex = item.tabindex or {column_key: \"active\"}\n    tabindex = tabindex[column_key]\n    return if tabindex == \"disabled\" then -1 else 0\n\n  get_colspan: (column_key, item) ->\n    colspan = item.colspan or {}\n    return colspan[column_key]\n\n  get_rowspan: (column_key, item) ->\n    rowspan = item.rowspan or {}\n    return rowspan[column_key]\n\n  skip_cell_rendering: (column_key) ->\n    item = @get_item()\n    skip = item.skip or []\n    return column_key in skip\n\n  show_select: ->\n    item = @get_item()\n    if typeof item.show_select == \"boolean\"\n      return item.show_select\n    return @props.show_select_column\n\n  is_transposed: (column_key) ->\n    column = @get_column column_key\n    return column.type == \"transposed\"\n\n  ###*\n   * Creates a select cell\n   *\n   * @returns SelectCell component\n  ###\n  create_select_cell: () ->\n    checkbox_name = \"#{@props.select_checkbox_name}:list\"\n    item = @get_item()\n    uid = @get_uid()\n    remarks = @props.remarks  # True if this row follows a remarks row\n\n    cell = (\n      <td key={uid}>\n        <Checkbox\n          name={checkbox_name}\n          value={uid}\n          disabled={@props.disabled}\n          checked={@props.selected}\n          tabIndex=\"-1\"\n          onChange={@props.on_select_checkbox_checked}/>\n\n        {remarks and\n        <a uid={uid}\n            href=\"#\"\n            className=\"remarks\"\n            onClick={@on_remarks_expand_click}>\n          <span className=\"remarksicon fas fa-comment-alt\"/>\n        </a>}\n      </td>)\n    return cell\n\n  ###*\n   * Creates a regular table cell\n   *\n   * @param column_key {String} The key of the column definition\n   * @param column_index {Integer} The current cell index\n   * @returns TableCell component\n  ###\n  create_regular_cell: (column_key, column_index) ->\n    item = @get_item()\n    column = @get_column column_key\n    colspan = @get_colspan column_key, item\n    rowspan = @get_rowspan column_key, item\n    tabindex = @get_tab_index column_key, item\n    css = \"contentcell #{column_key}\"\n\n    cell = (\n      <TableCell\n        {...@props}\n        key={column_index}\n        item={item}\n        column_key={column_key}\n        column_index={column_index}\n        column={column}\n        colspan={colspan}\n        rowspan={rowspan}\n        className={css}\n        tabIndex={tabindex}\n        />)\n    return cell\n\n  ###*\n   * Creates a transposed cell\n   *\n   * Transposed cell items contain an object key \"column_key\", which points to\n   * the transposed folderitem requested.\n   *\n   * E.g. a transposed worksheet would have the positions (1, 2, 3, ...) as\n   * columns and the contained services of each position as rows.\n   * {\"column_key\": \"1\", \"1\": {\"Service\": \"Calcium\", ...}}\n   *\n   * The column for \"1\" would then contain the type \"transposed\".\n   *\n   * @param column_key {String} The key of the column definition\n   * @param column_index {Integer} The current cell index\n   * @returns TableTransposedCell component\n  ###\n  create_transposed_cell: (column_key, column_index) ->\n    item = @get_item()\n    column = @get_column column_key\n    colspan = @get_colspan column_key, item\n    rowspan = @get_rowspan column_key, item\n    tabindex = @get_tab_index column_key, item\n    css = \"contentcell #{column_key}\"\n\n    cell = (\n      <TableTransposedCell\n        {...@props}\n        key={column_index}\n        item={item}\n        column_key={column_key}\n        column_index={column_index}\n        column={column}\n        colspan={colspan}\n        rowspan={rowspan}\n        on_remarks_expand_click={@on_remarks_expand_click}\n        className={css}\n        tabIndex={tabindex}\n        />)\n    return cell\n\n  build_cells: ->\n    cells = []\n\n    # insert select column\n    if @show_select()\n      cells.push @create_select_cell()\n\n    # insert visible columns in the right order\n    for column_key, column_index in @props.visible_columns\n\n      # Skip single cell rendering to support rowspans\n      if @skip_cell_rendering column_key\n        continue\n\n      if @is_transposed column_key\n        # Transposed Cell\n        cells.push @create_transposed_cell column_key, column_index\n      else\n        # Regular Cell\n        cells.push @create_regular_cell column_key, column_index\n\n    return cells\n\n  render: ->\n    return @build_cells()\n\n\nexport default TableCells\n","import React from \"react\"\nimport TableCells from \"./TableCells.coffee\"\n\n\nclass TableRow extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n  render: ->\n    <tr className={@props.className}\n        onClick={@props.onClick}\n        category={@props.category}\n        uid={@props.uid}>\n      <TableCells {...@props}/>\n    </tr>\n\n\nexport default TableRow\n","import React from \"react\"\nimport TableRow from \"./TableRow.coffee\"\n\n\nclass TableCategoryRow extends React.Component\n\n  constructor: (props) ->\n    super(props)\n    # Bind event handler to local context\n    @on_category_click = @on_category_click.bind @\n\n  on_category_click: (event) ->\n    el = event.currentTarget\n    category = el.getAttribute \"category\"\n    console.debug \"TableCategoryRow::on_row_click: category #{category} clicked\"\n\n    # notify parent event handler with the extracted values\n    if @props.on_category_click\n      # @param {string} category: The category title\n      @props.on_category_click category\n\n  build_category: ->\n    # collaped css\n    cls = \"collapsed\"\n    icon_cls = \"fas fa-caret-square-up\"\n\n    # expanded css\n    if @props.expanded\n      cls = \"expanded\"\n      icon_cls = \"fas fa-caret-square-down\"\n\n    return (\n      <td key=\"toggle\"\n          className={cls}\n          colSpan={@props.columns_count}>\n        <span className={icon_cls}></span> {@props.category}\n      </td>\n    )\n\n  render: ->\n    <tr category={@props.category}\n        onClick={@on_category_click}\n        className={@props.className}>\n      {@build_category()}\n    </tr>\n\n\nexport default TableCategoryRow\n","import React from \"react\"\nimport RemarksField from \"./RemarksField.coffee\"\n\n\nclass TableRemarksRow extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n  render: ->\n    <tr className={@props.className}>\n      <td style={{padding: 0; borderTop: 0}}></td>\n      <td style={{padding: 0; borderTop: 0}}\n          colSpan={@props.colspan - 1}>\n        <RemarksField {...@props} />\n      </td>\n    </tr>\n\nexport default TableRemarksRow\n","import React from \"react\"\nimport TableRow from \"./TableRow.coffee\"\nimport TableCategoryRow from \"./TableCategoryRow.coffee\"\nimport TableRemarksRow from \"./TableRemarksRow.coffee\"\n\n\nclass TableRows extends React.Component\n\n  constructor: (props) ->\n    super(props)\n    # Bind event handler to local context\n    @on_row_expand_click = @on_row_expand_click.bind @\n\n  on_row_expand_click: (event) ->\n    row = event.currentTarget\n    first_td = row.children.item(0)\n    if event.target == first_td\n      uid = row.getAttribute \"uid\"\n      if @props.on_row_expand_click\n        @props.on_row_expand_click uid\n\n  is_selected: (item) ->\n    uid = item.uid\n    selected_uids = @props.selected_uids or []\n    return uid in selected_uids\n\n  is_expanded: (item) ->\n    expanded = @props.expanded_rows or []\n    return item.uid in expanded\n\n  get_children: (item) ->\n    uid = item.uid\n    children = @props.children or {}\n    item_children = children[uid] or []\n    return item_children\n\n  is_category_expanded: (category) ->\n    return category in @props.expanded_categories\n\n  is_item_disabled: (item) ->\n    return item.disabled or no\n\n  is_child_item: (item) ->\n    return yes if item.parent\n\n  get_item_category: (item) ->\n    return item.category or null\n\n  get_item_children: (item) ->\n    # list of UIDs in the folderitem\n    return item.children or []\n\n  has_item_children: (item) ->\n    children = @get_item_children item\n    return children.length > 0\n\n  get_remarks_columns: (item) ->\n    columns = []\n    for key, value of @props.columns\n      if value.type == \"remarks\"\n        # skip undefined values (e.g. reassignable slots)\n        if item[key] is undefined\n          continue\n        columns.push key\n    return columns\n\n  get_item_uid: (item) ->\n    return item.uid\n\n  get_item_css: (item) ->\n    cls = [\"contentrow\"]\n\n    # review state\n    if item.state_class\n      cls = cls.concat item.state_class.split \" \"\n\n    # selected\n    if @is_selected item\n      cls.push \"table-info\"\n\n    # child/parent\n    if @is_child_item item\n      cls.push \"child\"\n    else\n      cls.push \"parent\"\n\n    # expandable\n    if @has_item_children item\n      if @is_expanded item\n        cls.push \"expanded\"\n      else\n        cls.push \"collapsed\"\n\n    return cls.join \" \"\n\n  render_categorized_rows: ->\n    rows = []\n\n    # Render categorized rows\n    if @props.show_categories\n      for category in @props.categories\n        expanded = @is_category_expanded category\n        rows.push(\n          <TableCategoryRow\n            {...@props}\n            key={category}\n            category={category}\n            expanded={expanded}\n            className=\"categoryrow\"\n            />)\n        # concatenate the categorized rows in the right order\n        rows = rows.concat @build_rows\n          props: {category: category}\n    # Render uncatgorized rows\n    else\n      rows = @build_rows()\n\n    return rows\n\n  build_rows: ({props}={}) ->\n    rows = []\n\n    props ?= {}\n    category = props.category or null\n    folderitems = props.folderitems or @props.folderitems\n\n    for item, item_index in folderitems\n\n      # skip items of other categories\n      if category and @get_item_category(item) != category\n        continue\n\n      # skip items in collapsed categories except the selected ones\n      if category and not @is_category_expanded category\n        if not @is_selected item\n          continue\n\n      uid = @get_item_uid item\n      css = @get_item_css item\n\n      # list of child UIDs in the folderitem\n      children = @get_item_children item\n\n      expanded = @is_expanded item\n      selected = @is_selected item\n      disabled = @is_item_disabled item\n      expandable = @has_item_children item\n      remarks_columns = @get_remarks_columns item\n      transposed = no\n\n      # transposed items have no uid, so use the index instead\n      if uid is null\n        transposed = yes\n        uid = item_index\n\n      rows.push(\n        <TableRow\n          {...@props}\n          key={uid}\n          item={item}\n          uid={uid}\n          category={category}\n          expanded={expanded}\n          remarks={remarks_columns.length > 0}\n          selected={selected}\n          disabled={disabled}\n          className={css}\n          onClick={expandable and @on_row_expand_click or undefined}\n          row_index={item_index}\n          />)\n\n      # columns with type=\"remarks\" set are rendered in their own row\n      for column_key, column_index in remarks_columns\n        # skip for transposed cells\n        break if transposed\n        column = @props.columns[column_key]\n        # support rowspanning for WS header slot\n        skip = item.skip or []\n        colspan = @props.columns_count - skip.length\n        # get the remarks value\n        value = item[column_key] or \"\"\n        rows.push(\n          <TableRemarksRow\n            {...@props}\n            key={\"remarks_\" + item_index}\n            uid={uid}\n            item={item}\n            column_key={column_key}\n            value={value}\n            expanded={expanded}\n            selected={selected}\n            disabled={disabled}\n            className={css + \" remarksrow\"}\n            colspan={colspan}\n            row_index={item_index}\n            />)\n\n      # append expanded rows\n      if expanded\n        # use the global children mapping to get the lazy fetched folderitem\n        children = @get_children item\n        if children.length > 0\n          child_rows = @build_rows\n            props:\n              category: category\n              folderitems: children\n          rows = rows.concat child_rows\n\n    return rows\n\n  render: ->\n    return @render_categorized_rows()\n\n\nexport default TableRows\n","import React from \"react\"\nimport TableHeaderRow from \"./TableHeaderRow.coffee\"\nimport TableRows from \"./TableRows.coffee\"\n\n\nclass Table extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n  render: ->\n    <table id={@props.id} className={@props.className}>\n      <thead>\n        <TableHeaderRow {...@props}/>\n      </thead>\n      <tbody>\n        <TableRows {...@props}/>\n      </tbody>\n    </table>\n\n\nexport default Table\n","import React from \"react\"\n\n\nclass TableColumnConfig extends React.Component\n\n  constructor: (props) ->\n    super(props)\n\n    @on_drag_start = @on_drag_start.bind @\n    @on_drag_end = @on_drag_end.bind @\n    @on_drag_over = @on_drag_over.bind @\n    @on_column_toggle_click = @on_column_toggle_click.bind @\n    @on_reset_click = @on_reset_click.bind @\n\n    @state =\n      columns_order: @props.columns_order\n\n  ###*\n   * componentDidUpdate(prevProps, prevState, snapshot)\n   *\n   * This is invoked immediately after updating occurs.\n   * This method is not called for the initial render.\n  ###\n  componentDidUpdate: (prevProps, prevState, snapshot) ->\n    # update the column order from the listing\n    if @props.columns_order != prevProps.columns_order\n        @setState {columns_order: @props.columns_order}\n\n  on_reset_click: (event) ->\n    event.preventDefault()\n    # call the parent event handler\n    if @props.on_column_toggle_click\n      @props.on_column_toggle_click \"reset\"\n\n  on_drag_start: (event) ->\n    @dragged_item = event.currentTarget\n    event.dataTransfer.effectAllowed = \"move\";\n    event.dataTransfer.setData(\"text/html\", @dragged_item)\n    event.dataTransfer.setDragImage(@dragged_item, 50, 0)\n\n  on_drag_over: (event) ->\n    li = event.currentTarget\n    return unless li isnt @dragged_item\n\n    column1 = @dragged_item.getAttribute \"column\"\n    column2 = li.getAttribute \"column\"\n\n    columns_order = @state.columns_order\n    # index of the second column\n    index = columns_order.indexOf column2\n    # filter out the currently dragged item\n    columns_order = columns_order.filter (column) -> column isnt column1\n    # add the dragged column after the dragged over column\n    columns_order.splice index, 0, column1\n    # set the new columns order to the local state\n    @setState {columns_order: columns_order}\n\n  on_drag_end: (event) ->\n    @dragged_item = null\n    # call the event handler of the controller to change the column order\n    if @props.on_columns_order_change\n      @props.on_columns_order_change @state.columns_order\n\n  on_column_toggle_click: (event) ->\n    event.preventDefault()\n    el = event.currentTarget\n    column = el.getAttribute \"column\"\n    # call the event handler of the controller to toggle the column\n    if @props.on_column_toggle_click\n      @props.on_column_toggle_click column\n\n  is_column_visible: (column) ->\n    return column.toggle isnt off\n\n  build_column_toggles: ->\n    columns = []\n    for key in @state.columns_order\n      column = @props.columns[key]\n      visible = @is_column_visible column\n      columns.push(\n        <li\n          key={key}\n          column={key}\n          style={{padding: \"0 5px 5px 0\"}}\n          className=\"column\"\n          onDragOver={@on_drag_over}>\n          <a\n            href=\"#\"\n            column={key}\n            className=\"draggable-column\"\n            onDragStart={@on_drag_start}\n            onDragEnd={@on_drag_end}\n            draggable={true}>\n            <span\n              column={key}\n              onClick={@on_column_toggle_click}\n              className=\"nav-item btn btn-light btn-sm\">\n              {visible and <i className=\"text-primary fas fa-check-square\"></i>}\n              {not visible and <i className=\"text-muted fas fa-square\"></i>}\n              &nbsp;<span dangerouslySetInnerHTML={{__html: column.title or key}}></span>\n            </span>\n          </a>\n        </li>\n      )\n    return columns\n\n\n  render: ->\n    <div id={@props.id} className={@props.className}>\n      <div className=\"row\">\n        <div className=\"col-sm-12 text-left my-3\">\n          <strong>{@props.title}</strong>\n          <div className=\"help-block\">{@props.description}</div>\n          <ul className=\"list-inline nav nav-pills\">\n            {@build_column_toggles()}\n            <li\n              key=\"reset\"\n              style={{padding: \"0 5px 5px 0\"}}>\n              <button onClick={@on_reset_click} className=\"btn btn-warning btn-sm\">\n                {_t(\"Reset Columns\")}\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n\nexport default TableColumnConfig\n","###* ReactJS controlled component\n *\n * Please use JSDoc comments: https://jsdoc.app\n *\n * Note: Each comment must start with a `/**` sequence in order to be recognized\n *       by the JSDoc parser.\n###\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport ButtonBar from \"./components/ButtonBar.coffee\"\nimport FilterBar from \"./components/FilterBar.coffee\"\nimport ListingAPI from \"./api.coffee\"\nimport Loader from \"./components/Loader.coffee\"\nimport Messages from \"./components/Messages.coffee\"\nimport Pagination from \"./components/Pagination.coffee\"\nimport SearchBox from \"./components/SearchBox.coffee\"\nimport Table from \"./components/Table.coffee\"\nimport TableColumnConfig from \"./components/TableColumnConfig.coffee\"\n\nimport \"./listing.css\"\n\n\n###* DOCUMENT READY ENTRY POINT ###\ndocument.addEventListener \"DOMContentLoaded\", ->\n  console.debug \"*** SENAITE.APP.LISTING::DOMContentLoaded: --> Loading ReactJS Controller\"\n\n  if not window._t?\n    console.warn(\"Global translation variable `_t` not found! Translations won't work!\")\n    # Mock the variable to return the input as output\n    window._t = (text, ...) -> text\n\n  tables = document.getElementsByClassName \"ajax-contents-table\"\n  window.listings ?= {}\n  for table in tables\n    form_id = table.dataset.form_id\n    controller = ReactDOM.render <ListingController root_el={table} />, table\n    # Keep a reference to the listing\n    window.listings[form_id] = controller\n\n\n###*\n * Controller class for one listing table.\n * The idea is to handle all API calls and logic here and pass the callback\n * methods to the contained components.\n * @class\n###\nclass ListingController extends React.Component\n\n  ###*\n   * Bind all event handlers and define the state\n   * @constructor\n  ###\n  constructor: (props) ->\n    super(props)\n\n    # bind callbacks\n    @dismissMessage = @dismissMessage.bind @\n    @doAction = @doAction.bind @\n    @filterBySearchterm = @filterBySearchterm.bind @\n    @filterByState = @filterByState.bind @\n    @on_api_error = @on_api_error.bind @\n    @on_column_config_click = @on_column_config_click.bind @\n    @on_select_checkbox_checked = @on_select_checkbox_checked.bind @\n    @on_reload = @on_reload.bind @\n    @saveAjaxQueue = @saveAjaxQueue.bind @\n    @saveEditableField = @saveEditableField.bind @\n    @setColumnsOrder = @setColumnsOrder.bind @\n    @showMore = @showMore.bind @\n    @export = @export.bind @\n    @sortBy = @sortBy.bind @\n    @toggleCategory = @toggleCategory.bind @\n    @toggleColumn = @toggleColumn.bind @\n    @toggleRemarks = @toggleRemarks.bind @\n    @toggleRow = @toggleRow.bind @\n    @updateEditableField = @updateEditableField.bind @\n\n    # root element\n    @root_el = @props.root_el\n\n    # get initial configuration data from the HTML attribute\n    @api_url = @root_el.dataset.api_url\n    @columns = JSON.parse @root_el.dataset.columns\n    @form_id = @root_el.dataset.form_id\n    @listing_identifier = @root_el.dataset.listing_identifier\n    @pagesize = parseInt @root_el.dataset.pagesize\n    @review_states = JSON.parse @root_el.dataset.review_states\n    @show_column_toggles = JSON.parse @root_el.dataset.show_column_toggles\n\n    # bind event handlers\n    @root_el.addEventListener \"reload\", @on_reload\n\n    # the API is responsible for async calls and knows about the endpoints\n    @api = new ListingAPI\n      api_url: @api_url\n      on_api_error: @on_api_error\n\n    @state =\n      # alert messages\n      messages: []\n      # loading indicator\n      loading: yes\n      # show column config toggle\n      show_column_config: no\n      # filter, pagesize, sort_on, sort_order and review_state are initially set\n      # from the request to allow bookmarks to specific searches\n      filter: @api.get_url_parameter(\"#{@form_id}_filter\")\n      pagesize: parseInt(@api.get_url_parameter(\"#{@form_id}_pagesize\")) or @pagesize\n      sort_on: @api.get_url_parameter(\"#{@form_id}_sort_on\")\n      sort_order: @api.get_url_parameter(\"#{@form_id}_sort_order\")\n      review_state: @api.get_url_parameter(\"#{@form_id}_review_state\") or \"default\"\n      # The query string is computed on the server and allows to bookmark listings\n      query_string: \"\"\n      # The API URL to call\n      api_url: \"\"\n      # form_id, columns and review_states are defined in the listing view and\n      # passed in via a data attribute in the template, because they can be seen\n      # as constant values\n      form_id: @form_id\n      columns: @get_default_columns()\n      review_states: @review_states\n      # The data from the folderitems view call\n      folderitems: []\n      # Mapping of UID -> list of children from the folderitems\n      children: {}\n      # The categories of the folderitems\n      categories: []\n      # Expanded categories\n      expanded_categories: []\n      # Expanded Rows (currently only Partitions)\n      expanded_rows: []\n      # Expanded Remarks Rows\n      expanded_remarks: []\n      # total number of items in the database\n      total: 0\n      # UIDs of selected rows are stored in selected_uids.\n      # These are sent when a transition action is clicked.\n      selected_uids: []\n      # The possible transition buttons\n      transitions: []\n      # The available catalog indexes for sorting\n      catalog_indexes: []\n      # The available catalog columns for sorting\n      catalog_columns: []\n      # The possible sortable columns\n      sortable_columns: []\n      # ajax save queue: mapping of uid: name -> value mapping\n      ajax_save_queue: {}\n      # Listing specific configs\n      content_filter: {}\n      allow_edit: no\n      show_select_all_checkbox: no\n      show_select_column: no\n      show_column_toggles: @show_column_toggles\n      select_checkbox_name: \"uids\"\n      post_action: \"workflow_action\"\n      show_categories: no\n      expand_all_categories: no\n      show_more: no\n      limit_from: 0\n      show_search: no\n      show_ajax_save: no\n      show_table_footer: no\n      fetch_transitions_on_select: yes\n      show_export: yes\n\n\n  ###*\n   * Dismisses a message by its message index\n   *\n   * @param index {int} Index of the message to dismiss\n   * @returns {bool} true\n  ###\n  dismissMessage: (index=null) ->\n    # dismiss all messages\n    if index is null\n      @setState {messages: []}\n    else\n      # dismiss message by index\n      messages = [].concat @state.messages\n      messages.splice index, 1\n      @setState {messages: messages}\n    return true\n\n  ###*\n   * Display a new bootstrap alert message above the table\n   *\n   * @param title {string} Title to be displayed in the alert box\n   *              {object} Config object for all parameters\n   * @param text {string} The message text\n   * @param traceback {string} Preformatted traceback\n   * @param level {string} info, success, warning, danger\n   * @returns {bool} true\n  ###\n  addMessage: (title, text, traceback, level=\"info\") ->\n    if typeof title is \"object\"\n      props = Object.assign title\n      title = props.title\n      text = props.text\n      traceback = props.traceback\n      level = props.level\n\n    messages = [].concat @state.messages\n    messages.push({\n      title: title,\n      text: text\n      traceback: traceback,\n      level: level,\n    })\n    @setState {messages: messages}\n    return true\n\n  ###*\n   * Parameters to be sent in each Ajax POST request\n   * @returns {object} current state values\n  ###\n  getRequestOptions: ->\n    options =\n      \"review_state\": @state.review_state\n      \"filter\": @state.filter\n      \"sort_on\": @state.sort_on\n      \"sort_order\": @state.sort_order\n      \"pagesize\": @state.pagesize\n      \"limit_from\": @state.limit_from\n      \"selected_uids\": @state.selected_uids,\n\n    console.debug(\"Request Options=\", options)\n    return options\n\n  ###*\n   * ReactJS event handler when the component did mount\n   * Fetches the initial folderitems\n  ###\n  componentDidMount: ->\n    @fetch_folderitems()\n\n  ###*\n   * componentDidUpdate(prevProps, prevState, snapshot)\n   *\n   * This is invoked immediately after updating occurs.\n   * This method is not called for the initial render.\n  ###\n  componentDidUpdate: (prevProps, prevState, snapshot) ->\n\n  ###*\n   * Expand/Collapse a listing category row by adding the category ID to the\n   * state `expanded_categories`\n   *\n   * @param category {string} Title of the category\n   * @returns {bool} true if the category was expanded, otherwise false\n  ###\n  toggleCategory: (category) ->\n    console.debug \"ListingController::toggleCategory: column=#{category}\"\n\n    # get the current expanded categories\n    expanded = @state.expanded_categories\n    # check if the current category is in there\n    index = expanded.indexOf category\n\n    if index > -1\n      # remove the category\n      expanded.splice index, 1\n    else\n      # add the category\n      expanded.push category\n\n    # set the new expanded categories\n    @setState {expanded_categories: expanded}\n    return expanded.length > 0\n\n  ###*\n   * Expand/Collapse remarks\n   *\n   * @param uid {string} UID of the item\n   * @returns {bool} true if the remarks were expanded, otherwise false\n  ###\n  toggleRemarks: (uid) ->\n    console.debug \"ListingController::toggleRemarks: uid=#{uid}\"\n\n    # skip if no uid is given\n    return false unless uid\n\n    # get the current expanded remarks\n    expanded = @state.expanded_remarks\n\n    # check if the current UID is in there\n    index = expanded.indexOf uid\n\n    if index > -1\n      # remove the UID\n      expanded.splice index, 1\n    else\n      # add the UID\n      expanded.push uid\n\n    # set the new expanded remarks\n    @setState {expanded_remarks: expanded}\n    return expanded.length > 0\n\n  ###\n   * Expand/Collapse the row\n   *\n   * @param uid {string} UID of the item\n   * @returns {bool} true if the row was expanded, otherwise false\n  ###\n  toggleRow: (uid) ->\n    console.debug \"ListingController::toggleRow: uid=#{uid}\"\n\n    # skip if no uid is given\n    return false unless uid\n\n    # get the current expanded rows\n    expanded = @state.expanded_rows\n\n    # check if the current row is in there\n    index = expanded.indexOf uid\n\n    if index > -1\n      # remove the category\n      expanded.splice index, 1\n    else\n      # add the category\n      expanded.push uid\n\n    # check if the children are already fetched\n    me = this\n    if uid not of @state.children\n      promise = @fetch_children parent_uid: uid\n      promise.then (data) ->\n        children = me.state.children\n        item_children = data.children or []\n        children[uid] = item_children\n        for child in item_children\n          if child.selected\n            me.selectUID child.uid, yes\n        me.setState\n          children: children\n          expanded_rows: expanded\n    else\n      # set the new expanded categories\n      @setState {expanded_rows: expanded}\n\n    return expanded.length > 0\n\n  ###*\n   * Toggle the visibility of a column by its column key.\n   *\n   * This method also stores the visibility of the column in the browser's\n   * localstorage.\n   *\n   * @param key {string} The ID of the column, or \"reset\" to restore all columns\n   * @returns {bool} true if the column was expanded, otherwise false\n  ###\n  toggleColumn: (key) ->\n    console.debug \"ListingController::toggleColumn: key=#{key}\"\n\n    # restore columns to the initial state and flush the local storage\n    if key is \"reset\"\n      @setState {columns: @get_default_columns()}\n      @set_local_column_config []\n      return true\n\n    # get the columns from the state\n    columns = @state.columns\n\n    # Toggle the visibility of the column\n    toggle = columns[key][\"toggle\"]\n    if toggle is undefined then toggle = yes\n    columns[key][\"toggle\"] = !toggle\n\n    column_config = []\n    for key, column of columns\n      # keep only a record of the column key and visibility in the local storage\n      column_config.push {key: key, toggle: column.toggle}\n\n    # store the new order and visibility in the local storage\n    @set_local_column_config column_config\n\n    # update the columns of the current state\n    @setState {columns: columns}\n\n    return toggle\n\n  ###*\n   * Update the order of all columns\n   *\n   * This method also stores the order of the columns in the browser's\n   * localstorage.\n   *\n   * @param order {array} Array of column IDs to be used as new order\n   * @returns {object} New ordered columns object\n  ###\n  setColumnsOrder: (order) ->\n    console.debug \"ListingController::setColumnsOrder: order=#{order}\"\n\n    # This object will hold the new ordered columns\n    ordered_columns = {}\n\n    # Although the column properties seem to be sorted, we keep in the local\n    # storage a list of column \"visibility\" objects to avoid any order issues\n    # with the JSON serialization step.\n    column_config = []\n\n    # get the keys of all columns (visible or not)\n    keys = Object.keys @state.columns\n\n    # sort the keys according to the passed in column order\n    keys.sort (a, b) ->\n      return order.indexOf(a) - order.indexOf(b)\n\n    # rebuild an object with the new property order\n    for key in keys\n      column = @state.columns[key]\n      toggle = column.toggle\n      if toggle is undefined then toggle = yes\n      # keep only a record of the column key and visibility in the local storage\n      column_config.push {key: key, toggle: toggle}\n      ordered_columns[key] = column\n\n    # store the new order and visibility in the local storage\n    @set_local_column_config column_config\n\n    # update the columns of the current state\n    @setState {columns: ordered_columns}\n    return ordered_columns\n\n  ###*\n   * Returns all column keys where the visibility toggle is true\n   *\n   * @returns columns {array} Array of ordered and visible columns\n  ###\n  get_visible_columns: ->\n    keys = []\n    allowed_keys = @get_allowed_column_keys()\n    visible = @get_columns_visibility()\n    for key in @get_columns_order()\n      # skip non-allowed keys\n      if key not in allowed_keys\n        continue\n      toggle = visible[key]\n      # skip columns which are not visible\n      if toggle is no\n        continue\n      # remember the key\n      keys.push key\n    return keys\n\n  ###*\n   * Get the default columns\n   *\n   * This method parses the JSON columns definitions from the DOM.\n   *\n   * @returns columns {object} Object of column definitions\n  ###\n  get_default_columns: ->\n    return JSON.parse @root_el.dataset.columns\n\n  ###*\n   * Get columns in the right order and visibility\n   *\n   * This method takes the local column settings into consideration to set the\n   * visibility and order of the final columns object.\n   *\n   * @returns columns {object} new columns object\n  ###\n  get_columns: ->\n    columns = {}\n    visibility = @get_columns_visibility()\n    for key in @get_columns_order()\n      column = @state.columns[key]\n      if column is undefined\n        console.warn \"Skipping nonexisting column '#{key}'.\"\n        continue\n      toggle = visibility[key]\n      if toggle isnt undefined\n        column[\"toggle\"] = toggle\n      columns[key] = column\n    return columns\n\n  ###*\n   * Extract all keys from the curent columns\n   *\n   * @returns keys {array} Current colum keys\n  ###\n  get_columns_keys: ->\n    return Object.keys @state.columns\n\n  ###*\n   * Return the order of all columns\n   *\n   * This method takes also the local column config into consideration\n   *\n   * @returns keys {array} Current colum keys\n  ###\n  get_columns_order: ->\n    keys = []\n    columns_keys = @get_columns_keys()\n    local_config = @get_local_column_config()\n    # filter out removed columns that still exist in the local config\n    local_config = local_config.filter (column) ->\n      columns_keys.indexOf(column.key) != -1\n    # Skip local settings if toggling/ordering is not allowed\n    allowed = @state.show_column_toggles\n\n    if allowed and local_config.length > 0\n      # extract the column keys in the user selected order\n      keys = local_config.map (item, index) ->\n        return item.key\n    else\n      # sort column keys by the current columns settings\n      allowed_keys = @get_allowed_column_keys()\n      keys = allowed_keys.concat columns_keys.filter (k) ->\n        # only append column keys which are not yet in  allowed_keys\n        return allowed_keys.indexOf(k) == -1\n\n    return keys\n\n  ###*\n   * Return the set visibility of all columns\n   *\n   * This method takes also the local column config into consideration\n   *\n   * @returns visibility {object} of column key -> visibility\n  ###\n  get_columns_visibility: ->\n    visibility = {}\n    local_config = @get_local_column_config()\n    # Skip local settings if toggling/ordering is not allowed\n    allowed = @state.show_column_toggles\n\n    if allowed and local_config.length > 0\n      # get the user defined visibility\n      for {key, toggle} in local_config\n        if toggle is undefined then toggle = true\n        visibility[key] = toggle\n    else\n      # use the default visibility of the columns\n      for key, column of @state.columns\n        toggle = column.toggle\n        if toggle is undefined then toggle = true\n        visibility[key] = toggle\n\n    return visibility\n\n  ###*\n   * Filter the results by the given state\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @param review_state {string} The state to filter, e.g. verified, published\n   * @returns {bool} true\n  ###\n  filterByState: (review_state=\"default\") ->\n    console.debug \"ListingController::filterByState: review_state=#{review_state}\"\n    @set_state\n      review_state: review_state\n      pagesize: @pagesize  # reset to the initial pagesize on state change\n      limit_from: 0\n    return true\n\n  ###*\n   * Filter the results by the given searchterm\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @param filter {string} An arbitrary search string\n   * @returns {bool} true\n  ###\n  filterBySearchterm: (filter=\"\") ->\n    console.debug \"ListingController::filterBySearchter: filter=#{filter}\"\n    @set_state\n      filter: filter\n      pagesize: @pagesize  # reset to the initial pagesize on search\n      limit_from: 0\n    return true\n\n  ###*\n   * Sort a column with a specific order\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @param sort_on {string} Sort index, e.g. getId, created\n   * @param sort_order {string} Sort order, e.g. ascending, descending\n   * @returns {bool} true\n  ###\n  sortBy: (sort_on, sort_order) ->\n    console.debug \"sort_on=#{sort_on} sort_order=#{sort_order}\"\n    @set_state\n      sort_on: sort_on\n      sort_order: sort_order\n      pagesize: @get_item_count() # keep the current number of items on sort\n      limit_from: 0\n    return true\n\n  ###*\n   * Show more results\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @param pagesize {int} The amount of additional items to request\n   * @returns {bool} true\n  ###\n  showMore: (pagesize) ->\n    console.debug \"ListingController::showMore: pagesize=#{pagesize}\"\n\n    # the existing folderitems\n    folderitems = @state.folderitems\n\n    me = this\n    @setState\n      pagesize: parseInt pagesize\n      limit_from: @state.folderitems.length\n      loading: yes\n    , ->\n      # N.B. we're using limit_from here, so we must append the returning\n      #      folderitems to the existing ones\n      promise = me.api.fetch_folderitems me.getRequestOptions()\n      promise.then (data) ->\n        me.toggle_loader off\n        if data.folderitems.length > 0\n          console.debug \"Adding #{data.folderitems.length} more folderitems...\"\n          # append the new folderitems to the existing ones\n          new_folderitems = folderitems.concat data.folderitems\n          me.setState\n            folderitems: new_folderitems\n    return true\n\n  ###\n  Export the current displayed items to a CSV\n  ###\n  export: ()  ->\n    console.debug \"ListingController::export\"\n\n    # Column keys, sorted properly\n    columns_keys = @get_columns_order()\n\n    # Only interested in visible columns\n    columns_visibility = @get_columns_visibility()\n    columns_keys = (col for col in columns_keys when columns_visibility[col] is yes)\n\n    # Generate the header\n    columns = @get_columns()\n    header = (JSON.stringify columns[key][\"title\"] or key for key in columns_keys)\n\n    # Generate the list of rows\n    folderitems = @state.folderitems\n    rows = (@to_csv_row(item, columns_keys) for item in folderitems)\n\n    # Join all together\n    csv = header.join \",\"\n    csv = csv + \"\\n\" + rows.join \"\\n\"\n    @download_csv csv, \"download.csv\"\n\n  ###\n  Triggers the download of the csv\n  ###\n  download_csv: (csv, filename) ->\n    universalBOM = \"\\uFEFF\"\n    csv_properties =\n      encoding: \"UTF-8\"\n      type: \"text/csv;charset=UTF-8\"\n\n    csv_file = new Blob [universalBOM, csv], csv_properties\n    down_link = document.createElement \"a\"\n    down_link.download = filename\n    down_link.href = window.URL.createObjectURL csv_file\n    down_link.display = \"none\"\n    document.body.appendChild down_link\n    down_link.click()\n\n  ###\n  Converts the item to a well-formed csv row\n  ###\n  to_csv_row: (item, columns) ->\n    cells = []\n    console.debug item\n    for column in columns\n\n      cell = item[column] or \"\"\n      if column == \"Result\"\n        # Give priority to formatted_result\n        cell = item.formatted_result or cell\n\n      else if cell.constructor == Object\n        # Handle interim fields gracefully\n        cell = cell.formatted_value or cell.value\n\n      if item.choices?\n        # Handle choices\n        choices = item.choices[column]\n        if choices?\n          choice = (c.ResultText for c in choices when c.ResultValue == cell)\n          cell = choice[0] or cell\n\n      cell = JSON.stringify cell\n      cells.push cell\n    cells.join(',')\n\n  ###*\n   * Submit form\n   *\n   * This method executes an HTTP POST form submission\n   *\n   * @param id {string} The workflow action id\n   * @param url {string} The form action URL\n   * @returns form submission\n  ###\n  doAction: (id, url) ->\n\n    # handle clear button separate\n    if id == \"clear_selection\"\n      @selectUID \"all\", off\n      return\n\n    # get the form element\n    form = document.getElementById @state.form_id\n\n    # N.B. Transition submit buttons are suffixed with `_transition`, because\n    #      otherwise the form.submit call below retrieves the element instead of\n    #      doing the method call.\n    action = id.split(\"_transition\")[0]\n\n    # inject workflow action id for `BikaListing._get_form_workflow_action`\n    input = document.createElement \"input\"\n    input.setAttribute \"type\", \"hidden\"\n    input.setAttribute \"id\", id\n    input.setAttribute \"name\", \"workflow_action_id\"\n    input.setAttribute \"value\", action\n    form.appendChild input\n\n    # Override the form action when a custom URL is given\n    if url then form.action = url\n\n    return form.submit()\n\n  ###*\n   * Select a row checkbox by UID\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @param uid {string} The UID of the row\n   * @param toggle {bool} true for select, false for deselect\n   * @returns {Promise} which is resolved when the state was sucessfully set\n  ###\n  selectUID: (uid, toggle) ->\n    # copy the selected UIDs from the state\n    #\n    # N.B. We use [].concat(@state.selected_uids) to get a copy, otherwise it\n    #      would be a reference of the state value!\n    selected_uids = [].concat @state.selected_uids\n\n    if toggle is yes\n      # handle the select all checkbox\n      if uid == \"all\"\n        # Do not select disabled items\n        items = @state.folderitems.filter (item) ->\n          return not item.disabled\n        # Get all uids from enabled items\n        all_uids = items.map (item) -> item.uid\n        # keep existing selected uids\n        for uid in all_uids\n          if uid not in selected_uids\n            selected_uids.push uid\n      else\n        if uid not in selected_uids\n          # push the uid into the list of selected_uids\n          selected_uids.push uid\n    else\n      # flush all selected UIDs when the select_all checkbox is deselected or\n      # when the deselect all button was clicked\n      if uid == \"all\"\n        # Keep readonly items\n        by_uid = @group_by_uid @state.folderitems\n        selected_uids = selected_uids.filter (uid) ->\n          item = by_uid[uid]\n          return item.readonly\n      else\n        # remove the selected UID from the list of selected_uids\n        pos = selected_uids.indexOf uid\n        selected_uids.splice pos, 1\n\n    # Only set the state and refetch transitions if the selected UIDs changed\n    added = selected_uids.filter((uid) =>\n       @state.selected_uids.indexOf(uid)==-1).length > 0\n    removed = @state.selected_uids.filter((uid) =>\n       selected_uids.indexOf(uid)==-1).length > 0\n    return unless added or removed\n\n    # return a promise which is resolved when the state was successfully set\n    return new Promise (resolve, reject) =>\n      @setState\n        selected_uids: selected_uids, resolve\n\n  ###*\n   * Save the values of the state's `ajax_save_queue`\n   *\n   * This method executes an Ajax request to the server.\n   *\n   * @returns {Promise} of the Ajax Save Request\n  ###\n  saveAjaxQueue: ->\n    uids = Object.keys @state.ajax_save_queue\n    return false unless uids.length > 0\n    return @ajax_save()\n\n  ###*\n   * Save a named value by UID to the ajax_save_queue\n   *\n   * If the column has the `autosave` property set,\n   * the value will be send immediately to the server\n   *\n   * @param uid {string} UID of the object\n   * @param name {string} name of the field\n   * @param value {string} value to set\n   * @param item {object} additional server data\n   * @returns {bool} true\n  ###\n  saveEditableField: (uid, name, value, item) ->\n    # Skip fields which are not editable\n    return false unless name in item.allow_edit\n    console.debug \"ListingController::saveEditableField: uid=#{uid} name=#{name} value=#{value}\"\n\n    column = @state.columns[name] or {}\n\n    # store the value in the ajax_save_queue\n    if column.ajax\n      me = this\n      ajax_save_queue = @state.ajax_save_queue\n      ajax_save_queue[uid] ?= {}\n      ajax_save_queue[uid][name] = value\n      @setState\n        show_ajax_save: yes\n        ajax_save_queue: ajax_save_queue\n      , ->\n        if column.autosave\n          me.ajax_save()\n    return true\n\n  ###*\n   * Update a named value by UID\n   *\n   * Saves the value and selects the row.\n   *\n   * @param uid {string} UID of the object\n   * @param name {string} name of the field\n   * @param value {string} value to set\n   * @param item {object} additional server data\n   * @returns {bool} true\n  ###\n  updateEditableField: (uid, name, value, item) ->\n    console.debug \"ListingController::updateEditableField: uid=#{uid} name=#{name} value=#{value}\"\n\n    # immediately fill the `ajax_save_queue` to show the \"Save\" button\n    @saveEditableField uid, name, value, item\n\n    # Select the whole row if an editable field changed its value\n    me = this\n    if not @is_uid_selected uid\n      me = this\n      @selectUID(uid, on).then ->\n        # fetch all possible transitions\n        if me.state.fetch_transitions_on_select\n          me.fetch_transitions()\n    return true\n\n  ###*\n   * Checks if the UID is selected.\n   *\n   * @param uid {string} UID of the object\n   * @returns {bool} true if the UID is selected or false\n  ###\n  is_uid_selected: (uid) ->\n    return uid in @state.selected_uids\n\n  ###*\n   * Checks if the UID is selected.\n   *\n   * Throws an error if the ID was not found in the review_states list.\n   *\n   * @param id {string} ID of the review_state, e.g. \"default\" or \"verified\"\n   * @returns {object} review_states item\n  ###\n  get_review_state_by_id: (id) ->\n    current = null\n\n    # review_states is the list of review_state items from the listing view\n    for review_state in @state.review_states\n      if review_state.id == id\n        current = review_state\n        break\n\n    if not current\n      console.warn \"No review_state with ID '#{id}' found\"\n      # return the default column keys\n      return {id: \"default\", columns: @get_columns_keys()}\n\n    return current\n\n  ###*\n   * Get the allowed columns of the current review state.\n   *\n   * This is defined in the view config by tge review_states list, e.g.:\n   *\n   *  review_states = [\n   *      {\n   *          \"id\": \"default\",\n   *          \"title\": _t(\"All\"),\n   *          \"contentFilter\": {},\n   *          \"transitions\": [],\n   *          \"custom_transitions\": [],\n   *          \"columns\": [\"Title\", \"Descritpion\"],\n   *      }\n   *  ]\n   *\n   * Usually the columns are defined as `self.columns.keys()`, which means that\n   * they contain the same columns and order as defined in the `self.columns`\n   * ordered dictionary.\n   *\n   * @returns {array} columns of column keys\n  ###\n  get_allowed_column_keys: ->\n    # get the current active state filter, e.g. \"default\"\n    review_state = @state.review_state\n    # get the defined review state item from the config\n    review_state_item = @get_review_state_by_id review_state\n    keys = review_state_item.columns\n    if not keys\n      # return the keys of the columns object\n      Object.keys @state.columns\n    # filter out nonexisting fields\n    columns = @state.columns\n    keys = keys.filter (key) -> columns[key] isnt undefined\n    return keys\n\n  ###*\n   * Calculate a common local storage key for this listing view.\n   *\n   * Note:\n   * The browser view initially calculates the `listing_identifier`, which is\n   * basically a concatenation of the listed items portal_type and view name.\n   *\n   * @returns key {string} with optional prefix and postfix\n  ###\n  get_local_storage_key: (prefix, postfix) ->\n    key = @listing_identifier\n    if @listing_identifier is undefined\n      key = location.pathname\n    if prefix isnt undefined\n      key = prefix + key\n    if postfix isnt undefined\n      key = key + postfix\n    return key\n\n  ###*\n   * Set the columns definition to the local storage\n   *\n   * @param columns {array} Array of {\"key\":key, \"toggle\":toggle} records\n   * @returns {bool} true\n  ###\n  set_local_column_config: (columns) ->\n    console.debug \"ListingController::set_local_column_config: columns=\", columns\n\n    key = @get_local_storage_key \"columns-\"\n    storage = window.localStorage\n    storage.setItem key, JSON.stringify(columns)\n    return true\n\n  ###*\n   * Returns column definitions of the local storage\n   *\n   * @returns columns {array} of {\"key\":key, \"toggle\":toggle} records\n  ###\n  get_local_column_config: ->\n    key = @get_local_storage_key \"columns-\"\n    storage = window.localStorage\n    columns = storage.getItem key\n\n    if not columns\n      return []\n\n    try\n      return JSON.parse columns\n    catch\n      return []\n\n  ###*\n   * Calculate the number of displayed columns\n   *\n   * This method also counts the selection column if present.\n   *\n   * @returns count {int} of displayed columns\n  ###\n  get_columns_count: ->\n    # get the current visible columns\n    visible_columns = @get_visible_columns()\n\n    count = visible_columns.length\n    # add 1 if the select column is rendered\n    if @state.show_select_column\n      count += 1\n    return count\n\n  ###*\n   * Get the names of all expanded categories\n   *\n   * @returns {array} expanded category names\n  ###\n  get_expanded_categories: ->\n    # return all categories if the flag is on\n    if @state.expand_all_categories\n      return [].concat @state.categories\n    # expand all categories for searches\n    if @state.filter\n      return [].concat @state.categories\n    return []\n\n  ###*\n   * Create a mapping of UID -> folderitem\n   *\n   * @param folderitems {array} Array of folderitem records\n   * @returns {object} of {UID:folderitem}\n  ###\n  group_by_uid: (folderitems) ->\n    folderitems ?= @state.folderitems\n    mapping = {}\n    folderitems.map (item, index) ->\n      # transposed cells have no uid, but a column_key\n      uid = item.uid or item.column_key or index\n      mapping[uid] = item\n    return mapping\n\n  ###*\n   * Calculate the count of current folderitems\n   *\n   * @returns {int} Number of folderitems\n  ###\n  get_item_count: ->\n    return @state.folderitems.length\n\n  ###*\n   * Toggles the loading animation on/off\n   *\n   * @param toggle {bool} true to show the loader, false otherwise\n   * @returns {bool} toggle state\n  ###\n  toggle_loader: (toggle=off) ->\n    @setState loading: toggle\n    return toggle\n\n  ###*\n   * Set the state with optional folderitems fetch\n   *\n   * @param data {object} data to set to the state\n   * @param fetch {bool} true to re-fetch the folderitems, false otherwise\n   * @returns {bool} true\n  ###\n  set_state: (data, fetch=yes) ->\n    me = this\n    @setState data, ->\n      if fetch then me.fetch_folderitems()\n    return true\n\n  ###*\n   * Fetch the possible transitions of the selected UIDs\n   *\n   * @returns {Promise} for the API fetch transitions call\n  ###\n  fetch_transitions: ->\n    selected_uids = @state.selected_uids\n\n    # empty the possible transitions if no UID is selected\n    if selected_uids.length == 0\n      @setState {transitions: []}\n      return\n\n    # turn loader on\n    @toggle_loader on\n\n    # fetch the transitions from the server\n    promise = @api.fetch_transitions @getRequestOptions()\n\n    me = this\n    promise.then (data) ->\n      # data looks like this: {\"transitions\": [...]}\n      me.setState data, ->\n        console.debug \"ListingController::fetch_transitions: NEW STATE=\", me.state\n        # turn loader off\n        me.toggle_loader off\n    return promise\n\n  ###\n   * Fetch folderitems from the server\n   *\n   * @returns {Promise} for the API fetch folderitems call\n  ###\n  fetch_folderitems: ->\n\n    # turn loader on\n    @toggle_loader on\n\n    # fetch the folderitems from the server\n    promise = @api.fetch_folderitems @getRequestOptions()\n\n    me = this\n    promise.then (data) ->\n      console.debug \"ListingController::fetch_folderitems: GOT RESPONSE=\", data\n\n      # N.B. Always keep selected folderitems, because otherwise modified fields\n      #      won't get send to the server on form submit.\n      #\n      # This is needed e.g. in \"Manage Analyses\" when the users searches for\n      # analyses to add. Keeping only the UID is there not sufficient, because\n      #      we would lose the Mix/Max values.\n      #\n      # TODO refactor this logic\n      # -------------------------------8<--------------------------------------\n      # existing folderitems from the state as a UID -> folderitem mapping\n      existing_folderitems = me.group_by_uid me.state.folderitems\n      # new folderitems from the server as a UID -> folderitem mapping\n      new_folderitems = me.group_by_uid data.folderitems\n      # new categories from the server\n      new_categories = data.categories or []\n\n      # keep selected and potentially modified folderitems in the table\n      for uid in me.state.selected_uids\n        # inject missing folderitems into the server sent folderitems\n        if uid not of new_folderitems\n          # get the missing folderitem from the current state\n          folderitem = existing_folderitems[uid]\n          # skip if the selected UID is not in the existing folderitems\n          # -> happens for transposed WS folderitems, e.g.: {0: {uid: ...}, 1: {uid: ...}}\n          continue unless folderitem\n          # inject it to the new folderitems list from the server\n          new_folderitems[uid] = existing_folderitems[uid]\n          # also append the category if it is missing\n          category = folderitem.category\n          if category and category not in new_categories\n            new_categories.push category\n            # XXX unfortunately any sortKey sorting of the category get lost here\n            new_categories.sort()\n\n      # write back new categories\n      data.categories = new_categories\n      # write back new folderitems\n      data.folderitems = Object.values new_folderitems\n      # -------------------------------->8-------------------------------------\n\n      me.setState data, ->\n        # calculate the new expanded categories and the internal folderitems mapping\n        me.setState\n          expanded_categories: me.get_expanded_categories()\n        , ->\n          console.debug \"ListingController::fetch_folderitems: NEW STATE=\", me.state\n        # turn loader off\n        me.toggle_loader off\n\n    return promise\n\n  ###\n   * Fetch child-folderitems from the server\n   *\n   * @param {parent_uid} UID of the parent, e.g. the primary partition\n   * @param {child_uids} UIDs of the children (partitions) to load\n   * @returns {Promise} for the API fetch folderitems call\n  ###\n  fetch_children: ({parent_uid, child_uids}={}) ->\n    # turn loader on\n    @toggle_loader on\n\n    # lookup child_uids from the folderitem\n    if not child_uids\n      by_uid = @group_by_uid()\n      folderitem = by_uid[parent_uid]\n      if not folderitem\n        throw \"No folderitem could be found for UID #{uid}\"\n      child_uids = folderitem.children or []\n\n    # fetch the children from the server\n    promise = @api.fetch_children\n      parent_uid: parent_uid\n      child_uids: child_uids\n\n    me = this\n    promise.then (data) ->\n      console.debug \"ListingController::fetch_children: GOT RESPONSE=\", data\n      # turn loader off\n      me.toggle_loader off\n\n    return promise\n\n  ###\n   * Checks if the top toolbar should be loaded or not.\n   *\n   * @returns {bool} true to render the top toolbar, false otherwise\n  ###\n  render_toolbar_top: ->\n    if @state.show_more\n      return yes\n    if @state.show_search\n      return yes\n    if @state.review_states.length > 1\n      return yes\n    return no\n\n  ###\n   * Send the `ajax_save_queue` to the server\n   *\n   * @returns {Promise} of the API set_fields call\n  ###\n  ajax_save: ->\n    console.debug \"ListingController::ajax_save:ajax_save_queue=\", @state.ajax_save_queue\n\n    # turn loader on\n    @toggle_loader on\n\n    promise = @api.set_fields\n      save_queue: @state.ajax_save_queue\n\n    me = this\n    promise.then (data) ->\n      console.debug \"ListingController::ajax_save: GOT DATA=\", data\n\n      # uids of the updated objects\n      uids = data.uids or []\n\n      # ensure that all updated UIDs are also selected\n      uids.map (uid, index) -> me.selectUID uid, yes\n\n      # folderitems of the updated objects and their dependencies\n      folderitems = data.folderitems or []\n\n      # update the existing folderitems\n      me.update_existing_folderitems_with folderitems\n\n      # fetch all possible transitions\n      if me.state.fetch_transitions_on_select\n        me.fetch_transitions()\n\n      # empty the ajax save queue and hide the save button\n      me.setState\n        show_ajax_save: no\n        ajax_save_queue: {}\n\n      # toggle loader off\n      me.toggle_loader off\n    return promise\n\n  ###*\n   * Update existing folderitems\n   *\n   * This is done for performance increase to avoid a complete re-rendering\n   *\n   * @param folderitems {array} Array of folderitems records from the view\n  ###\n  update_existing_folderitems_with: (folderitems) ->\n    console.log \"ListingController::update_existing_folderitems_with: \", folderitems\n\n    # These folderitems get set to the state\n    new_folderitems = []\n\n    # The updated items from the server\n    updated_folderitems = @group_by_uid folderitems\n\n    # The current folderitems in our @state\n    existing_folderitems = @group_by_uid @state.folderitems\n\n    # We iterate through the existing folderitems and check if the items was updated.\n    for uid, folderitem of existing_folderitems\n\n      # shallow copy of the existing folderitem in @state.folderitems\n      old_item = Object.assign {}, folderitem\n\n      if uid not of updated_folderitems\n        # nothing changed -> keep the old folderitem\n        new_folderitems.push old_item\n      else\n        # shallow copy of the updated folderitem from the server\n        new_item = Object.assign {}, updated_folderitems[uid]\n        # keep non-updated properties\n        for key, value of old_item\n          # XXX Workaround for Worksheet classic/transposed views\n          # -> Always keep those values from the original folderitem\n          if key in [\"rowspan\", \"colspan\", \"skip\"]\n            new_item[key] = old_item[key]\n          if not new_item.hasOwnProperty key\n            new_item[key] = old_item[key]\n        # add the new folderitem\n        new_folderitems.push new_item\n\n    # updated the state with the new folderitems\n    @setState\n      folderitems: new_folderitems\n\n  ###*\n   * EVENT HANDLERS\n   *\n   * N.B. All `event` objects are ReactJS events\n   *      https://reactjs.org/docs/handling-events.html\n  ###\n\n  on_column_config_click: (event) ->\n    event.preventDefault()\n    return unless @state.show_column_toggles\n    toggle = not @state.show_column_config\n    @setState\n      show_column_config: toggle\n\n  on_select_checkbox_checked: (event) ->\n    console.debug \"°°° ListingController::on_select_checkbox_checked\"\n    me = this\n    el = event.currentTarget\n    uid = el.value\n    checked = el.checked\n\n    @selectUID(uid, checked).then ->\n      if me.state.fetch_transitions_on_select\n        # fetch all possible transitions\n        me.fetch_transitions()\n\n  on_api_error: (response) ->\n    @toggle_loader off\n    console.debug \"°°° ListingController::on_api_error: GOT AN ERROR RESPONSE: \", response\n    response.text().then (data) =>\n      title = _t(\"Oops, an error occured! 🙈\")\n      message = _t(\"The server responded with the status #{response.status}: #{response.statusText}\")\n      @addMessage title, message, null, level=\"danger\"\n    return response\n\n  on_reload: (event) ->\n    console.debug \"°°° ListingController::on_reload:event=\", event\n    @fetch_folderitems()\n\n\n  ###*\n   * Renders the listing table\n   * @returns {JSX}\n  ###\n  render: ->\n    console.debug \"*** RENDER ***\"\n\n    # computed properties at render time\n    columns = @get_columns()\n    columns_order = @get_columns_order()\n    columns_count = @get_columns_count()\n    visible_columns = @get_visible_columns()\n    item_count = @get_item_count()\n    render_toolbar_top = @render_toolbar_top()\n\n    return (\n      <div className=\"listing-container\">\n        <Messages on_dismiss_message={@dismissMessage} id=\"messages\" className=\"messages\" messages={@state.messages} />\n        {@state.loading and <div id=\"table-overlay\"/>}\n        {not render_toolbar_top and @state.loading and <Loader loading={@state.loading} />}\n        {render_toolbar_top and\n          <div className=\"row top-toolbar\">\n            <div className=\"col-sm-8\">\n              <FilterBar\n                className=\"filterbar nav nav-pills\"\n                on_filter_button_clicked={@filterByState}\n                review_state={@state.review_state}\n                review_states={@state.review_states}/>\n            </div>\n            <div className=\"col-sm-1 text-right\">\n              <Loader loading={@state.loading} />\n            </div>\n            <div className=\"col-sm-3 text-right\">\n              <SearchBox\n                show_search={@state.show_search}\n                on_search={@filterBySearchterm}\n                filter={@state.filter}\n                placeholder={_t(\"Search\")} />\n            </div>\n          </div>\n        }\n        <div className=\"row\">\n          <div className=\"col-sm-12 table-responsive\">\n            {@state.show_column_toggles and\n              <a\n                href=\"#\"\n                onClick={@on_column_config_click}\n                className=\"pull-right\">\n                <i className=\"fas fa-ellipsis-h\"></i>\n              </a>}\n            {@state.show_column_config and\n              <TableColumnConfig\n                title={_t(\"Configure Table Columns\")}\n                description={_t(\"Click to toggle the visibility or drag&drop to change the order\")}\n                columns={columns}\n                columns_order={columns_order}\n                on_column_toggle_click={@toggleColumn}\n                on_columns_order_change={@setColumnsOrder}/>}\n            <Table\n              className=\"contentstable table table-condensed table-hover small\"\n              allow_edit={@state.allow_edit}\n              on_header_column_click={@sortBy}\n              on_select_checkbox_checked={@on_select_checkbox_checked}\n              on_context_menu={@on_column_config_click}\n              sort_on={@state.sort_on}\n              sort_order={@state.sort_order}\n              catalog_indexes={@state.catalog_indexes}\n              catalog_columns={@state.catalog_columns}\n              sortable_columns={@state.sortable_columns}\n              columns={columns}\n              columns_count={columns_count}\n              review_state={@state.review_state}\n              visible_columns={visible_columns}\n              review_states={@state.review_states}\n              folderitems={@state.folderitems}\n              children={@state.children}\n              selected_uids={@state.selected_uids}\n              select_checkbox_name={@state.select_checkbox_name}\n              show_select_column={@state.show_select_column}\n              show_select_all_checkbox={@state.show_select_all_checkbox}\n              categories={@state.categories}\n              expanded_categories={@state.expanded_categories}\n              expanded_rows={@state.expanded_rows}\n              expanded_remarks={@state.expanded_remarks}\n              show_categories={@state.show_categories}\n              on_category_click={@toggleCategory}\n              on_row_expand_click={@toggleRow}\n              on_remarks_expand_click={@toggleRemarks}\n              filter={@state.filter}\n              update_editable_field={@updateEditableField}\n              save_editable_field={@saveEditableField}\n              />\n          </div>\n        </div>\n        {@state.show_table_footer and\n          <div className=\"row\">\n            <div className=\"col-sm-8\">\n              <ButtonBar\n                className=\"buttonbar nav nav-pills\"\n                show_ajax_save={@state.show_ajax_save}\n                ajax_save_button_title={_t(\"Save\")}\n                on_transition_button_click={@doAction}\n                on_ajax_save_button_click={@saveAjaxQueue}\n                selected_uids={@state.selected_uids}\n                show_select_column={@state.show_select_column}\n                transitions={@state.transitions}\n                review_state={@get_review_state_by_id(@state.review_state)}\n                />\n            </div>\n            <div className=\"col-sm-1 text-right\">\n              <Loader loading={@state.loading} />\n            </div>\n            <div className=\"col-sm-3 text-right\">\n              <Pagination\n                id=\"pagination\"\n                className=\"pagination-controls\"\n                total={@state.total}\n                show_more_button_title={_t(\"Show more\")}\n                onShowMore={@showMore}\n                show_more={@state.show_more}\n                count={item_count}\n                pagesize={@state.pagesize}\n                export_button_title={_t(\"Export\")}\n                show_export={@state.show_export}\n                onExport={@export} />\n            </div>\n          </div>\n        }\n      </div>\n    )\n"],"sourceRoot":""}